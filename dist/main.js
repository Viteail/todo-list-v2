(()=>{"use strict";var t={d:(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{g:()=>Ce});let e,n,a,r=[];const i=()=>{const t=document.createElement("input");return t.classList.add("duedate-input"),t.type="date",gt.push(t),t},o=()=>{const t=document.createElement("select");t.classList.add("priority-select");const e=document.createElement("option");e.textContent="Priority Low",e.value="low";const n=document.createElement("option");n.textContent="Priority Medium",n.value="medium";const a=document.createElement("option");return a.textContent="Priority High",a.value="high",t.add(e),t.add(n),t.add(a),gt.push(t),t},d=()=>{const t=document.createElement("button");return t.classList.add("cancel-btn"),t.textContent="Cancel",St(t),t},s=()=>{const t=document.createElement("button");return t.classList.add("addtask-btn"),t.textContent="Add task",pt=t,wt(),t},c=t=>{const e=document.createElement("div");return e.classList.add("checklist-wrapper"),e.appendChild(u(t)),e},u=t=>{const e=document.createElement("button");return e.classList.add("checklist-btn"),e.appendChild(l(t)),e},l=t=>{const e=document.createElement("img");return e.classList.add("checklist-img"),e.src=`icons/checklist-${t}.svg`,e},m=t=>{const{name:e,desc:n,dueDate:a}=t,r=document.createElement("div");return r.classList.add("taskinfo-wrapper"),r.appendChild(h(e)),r.appendChild(v(n)),r.appendChild(f(a)),r},h=t=>{const e=document.createElement("div");return e.classList.add("name-container"),e.textContent=t,e},v=t=>{const e=document.createElement("div");return e.classList.add("desc-container"),e.textContent=t,e},f=t=>{const e=document.createElement("div");return e.classList.add("duedate-container"),e.textContent=t,e},p=()=>{const t=document.createElement("div");return t.classList.add("edit-container"),t.appendChild(g()),t},g=()=>{const t=document.createElement("button");return t.classList.add("edit-btn","invisible"),t.appendChild(w()),e=t,t},w=()=>{const t=document.createElement("img");return t.classList.add("edit-img"),t.src="icons/edit.svg",t},b=()=>{const t=document.createElement("div");return t.classList.add("remove-container"),t.appendChild(C()),t},C=()=>{const t=document.createElement("button");return t.classList.add("remove-btn","invisible"),t.appendChild(y()),n=t,t},y=()=>{const t=document.createElement("img");return t.classList.add("remove-img"),t.src="icons/trash.svg",t};class E{constructor(t,e,n,a){this.name=t,this.desc=e,this.dueDate=n,this.priority=a}}let L=[];function T(t){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},T(t)}function k(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function x(t){k(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===T(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function M(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function D(t){k(1,arguments);var e=x(t),n=e.getUTCDay(),a=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function P(t){k(1,arguments);var e=x(t),n=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=D(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=D(i);return e.getTime()>=r.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}var S={};function U(){return S}function W(t,e){var n,a,r,i,o,d,s,c;k(1,arguments);var u=U(),l=M(null!==(n=null!==(a=null!==(r=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(o=e.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==r?r:u.weekStartsOn)&&void 0!==a?a:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=x(t),h=m.getUTCDay(),v=(h<l?7:0)+h-l;return m.setUTCDate(m.getUTCDate()-v),m.setUTCHours(0,0,0,0),m}function Y(t,e){var n,a,r,i,o,d,s,c;k(1,arguments);var u=x(t),l=u.getUTCFullYear(),m=U(),h=M(null!==(n=null!==(a=null!==(r=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(o=e.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==a?a:null===(s=m.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(l+1,0,h),v.setUTCHours(0,0,0,0);var f=W(v,e),p=new Date(0);p.setUTCFullYear(l,0,h),p.setUTCHours(0,0,0,0);var g=W(p,e);return u.getTime()>=f.getTime()?l+1:u.getTime()>=g.getTime()?l:l-1}function j(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const O=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return j("yy"===e?a%100:a,e.length)},N=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):j(n+1,2)},q=function(t,e){return j(t.getUTCDate(),e.length)},H=function(t,e){return j(t.getUTCHours()%12||12,e.length)},F=function(t,e){return j(t.getUTCHours(),e.length)},z=function(t,e){return j(t.getUTCMinutes(),e.length)},A=function(t,e){return j(t.getUTCSeconds(),e.length)},Q=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return j(Math.floor(a*Math.pow(10,n-3)),e.length)};var G={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return O(t,e)},Y:function(t,e,n,a){var r=Y(t,a),i=r>0?r:1-r;return"YY"===e?j(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):j(i,e.length)},R:function(t,e){return j(P(t),e.length)},u:function(t,e){return j(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return j(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return j(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return N(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return j(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){var r=function(t,e){k(1,arguments);var n=x(t),a=W(n,e).getTime()-function(t,e){var n,a,r,i,o,d,s,c;k(1,arguments);var u=U(),l=M(null!==(n=null!==(a=null!==(r=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(o=e.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==a?a:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=Y(t,e),h=new Date(0);return h.setUTCFullYear(m,0,l),h.setUTCHours(0,0,0,0),W(h,e)}(n,e).getTime();return Math.round(a/6048e5)+1}(t,a);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):j(r,e.length)},I:function(t,e,n){var a=function(t){k(1,arguments);var e=x(t),n=D(e).getTime()-function(t){k(1,arguments);var e=P(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),D(n)}(e).getTime();return Math.round(n/6048e5)+1}(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):j(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):q(t,e)},D:function(t,e,n){var a=function(t){k(1,arguments);var e=x(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=n-e.getTime();return Math.floor(a/864e5)+1}(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):j(a,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return j(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return j(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return j(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,r=t.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,r=t.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return H(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):F(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):j(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):j(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):z(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):A(t,e)},S:function(t,e){return Q(t,e)},X:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return B(r);case"XXXX":case"XX":return R(r);default:return R(r,":")}},x:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return B(r);case"xxxx":case"xx":return R(r);default:return R(r,":")}},O:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+X(r,":");default:return"GMT"+R(r,":")}},z:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+X(r,":");default:return"GMT"+R(r,":")}},t:function(t,e,n,a){var r=a._originalDate||t;return j(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return j((a._originalDate||t).getTime(),e.length)}};function X(t,e){var n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=e||"";return n+String(r)+o+j(i,2)}function B(t,e){return t%60==0?(t>0?"-":"+")+j(Math.abs(t)/60,2):R(t,e)}function R(t,e){var n=e||"",a=t>0?"-":"+",r=Math.abs(t);return a+j(Math.floor(r/60),2)+n+j(r%60,2)}const J=G;var I=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},_=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},V={p:_,P:function(t,e){var n,a=t.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return I(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",I(r,e)).replace("{{time}}",_(i,e))}};const $=V;var K=["D","DD"],Z=["YY","YYYY"];function tt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var et={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function nt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}var at,rt={date:nt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:nt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:nt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},it={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ot(t){return function(e,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=t.formattingValues[i]||t.formattingValues[r]}else{var o=t.defaultWidth,d=null!=n&&n.width?String(n.width):t.defaultWidth;a=t.values[d]||t.values[o]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function dt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;var o,d=i[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(d))return n}(s):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(d))return n}(s);return o=t.valueCallback?t.valueCallback(c):c,{value:o=n.valueCallback?n.valueCallback(o):o,rest:e.slice(d.length)}}}const st={code:"en-US",formatDistance:function(t,e,n){var a,r=et[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:rt,formatRelative:function(t,e,n,a){return it[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ot({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ot({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:ot({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ot({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ot({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(at={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(at.matchPattern);if(!n)return null;var a=n[0],r=t.match(at.parsePattern);if(!r)return null;var i=at.valueCallback?at.valueCallback(r[0]):r[0];return{value:i=e.valueCallback?e.valueCallback(i):i,rest:t.slice(a.length)}}),era:dt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:dt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:dt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:dt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:dt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var ct=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ut=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,lt=/^'([^]*?)'?$/,mt=/''/g,ht=/[a-zA-Z]/;function vt(t,e,n){var a,r,i,o,d,s,c,u,l,m,h,v,f,p,g,w,b,C;k(2,arguments);var y=String(e),E=U(),L=null!==(a=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:E.locale)&&void 0!==a?a:st,D=M(null!==(i=null!==(o=null!==(d=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==d?d:E.firstWeekContainsDate)&&void 0!==o?o:null===(l=E.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var P=M(null!==(h=null!==(v=null!==(f=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(w=g.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:E.weekStartsOn)&&void 0!==v?v:null===(b=E.locale)||void 0===b||null===(C=b.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==h?h:0);if(!(P>=0&&P<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!L.localize)throw new RangeError("locale must contain localize property");if(!L.formatLong)throw new RangeError("locale must contain formatLong property");var S=x(t);if(!function(t){if(k(1,arguments),!function(t){return k(1,arguments),t instanceof Date||"object"===T(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=x(t);return!isNaN(Number(e))}(S))throw new RangeError("Invalid time value");var W=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(S),Y=function(t,e){return k(2,arguments),function(t,e){k(2,arguments);var n=x(t).getTime(),a=M(e);return new Date(n+a)}(t,-M(e))}(S,W),j={firstWeekContainsDate:D,weekStartsOn:P,locale:L,_originalDate:S};return y.match(ut).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,$[e])(t,L.formatLong):t})).join("").match(ct).map((function(a){if("''"===a)return"'";var r,i,o=a[0];if("'"===o)return(i=(r=a).match(lt))?i[1].replace(mt,"'"):r;var d,s=J[o];if(s)return null!=n&&n.useAdditionalWeekYearTokens||(d=a,-1===Z.indexOf(d))||tt(a,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!function(t){return-1!==K.indexOf(t)}(a)||tt(a,e,String(t)),s(Y,a,L.localize,j);if(o.match(ht))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}const ft=t=>{t.addEventListener("click",(()=>{(t=>{const e=document.createElement("div");e.classList.add("todo-form"),t.appendChild(e),Dt=t,Pt=e,e.appendChild((()=>{const t=document.createElement("input");return t.classList.add("taskname-input"),t.placeholder="Task name",gt.push(t),t})()),e.appendChild((()=>{const t=document.createElement("input");return t.classList.add("taskdescription-input"),t.placeholder="Description",gt.push(t),t})()),e.appendChild((()=>{const t=document.createElement("div");return t.classList.add("taskdetails-container"),t.appendChild(i()),t.appendChild(o()),t})()),e.appendChild((()=>{const t=document.createElement("div");return t.classList.add("buttons-container"),t.appendChild(d()),t.appendChild(s()),t})())})(t.parentElement),t.remove()}))};let pt,gt=[];const wt=()=>{Ct(),pt.addEventListener("click",(()=>{if(!bt())return;""===gt[2].value&&(gt[2].value=Lt());let t=new E(gt[0].value,gt[1].value,Et(gt[2].value),gt[3].value);L.push(t),(()=>{let t=L[L.length-1];Dt.appendChild(((t,i)=>{const o=document.createElement("div");return o.classList.add("task"),o.appendChild(c(i)),o.appendChild(m(t)),o.appendChild(p()),o.appendChild(b()),a=o,r.push({task:a,edit:e,remove:n}),r.forEach((t=>((t,e,n)=>{t.addEventListener("mouseover",(()=>{e.classList.remove("invisible"),n.classList.remove("invisible")})),t.addEventListener("mouseout",(()=>{e.classList.add("invisible"),n.classList.add("invisible")}))})(t.task,t.edit,t.remove))),o})({name:t.name,desc:t.desc,dueDate:t.dueDate},t.priority))})(),Ut(),yt()}))},bt=()=>""!==gt[0].value,Ct=()=>{gt[0].addEventListener("input",(()=>""!==gt[0].value?pt.classList.add("valid"):pt.classList.remove("valid")))},yt=()=>{gt=[]},Et=t=>vt(new Date(t),"dd-MM-yyyy"),Lt=()=>vt(new Date,"yyyy-MM-dd"),Tt=()=>{const t=document.createElement("div");return t.classList.add("task-add"),t.appendChild(kt()),t.appendChild(Mt()),ft(t),t},kt=()=>{const t=document.createElement("div");return t.classList.add("task-add-btn"),t.appendChild(xt()),t},xt=()=>{const t=document.createElement("img");return t.classList.add("task-add-icon"),t.src="icons/plus-green.svg",t},Mt=()=>{const t=document.createElement("div");return t.classList.add("task-add-text"),t.textContent="Add task",t};let Dt,Pt;const St=t=>{t.addEventListener("click",(()=>Ut()))},Ut=()=>{Dt.appendChild(Tt()),Pt.remove()},Wt=()=>{Yt.remove()};let Yt;const jt=()=>{const t=document.createElement("div");return t.classList.add("modal-content"),t.appendChild(Ot()),t.appendChild(Nt()),t.appendChild(Gt()),t},Ot=()=>{const t=document.createElement("div");return t.classList.add("header-modal"),t.textContent="Add project",t},Nt=()=>{const t=document.createElement("div");return t.classList.add("inputs-wrapper"),t.appendChild(qt()),t.appendChild(zt()),t},qt=()=>{const t=document.createElement("div");return t.classList.add("inputname-container"),t.appendChild(Ht()),t.appendChild(Ft()),t},Ht=()=>{const t=document.createElement("div");return t.classList.add("inputname-label"),t.textContent="Name",t},Ft=()=>{const t=document.createElement("input");return t.classList.add("projectname-input"),$t=t,t},zt=()=>{const t=document.createElement("div");return t.classList.add("inputcolor-container"),t.appendChild(At()),t.appendChild(Qt()),t},At=()=>{const t=document.createElement("div");return t.classList.add("inputcolor-label"),t.textContent="Color",t},Qt=()=>{const t=document.createElement("input");return t.type="color",t.classList.add("projectcolor-input"),Kt=t,t},Gt=()=>{const t=document.createElement("div");return t.classList.add("projectbuttons-container"),t.appendChild(Xt()),t.appendChild(Bt()),t},Xt=()=>{const t=document.createElement("button");return t.classList.add("project-cancel-btn"),t.textContent="Cancel",t.addEventListener("click",(()=>Wt())),t},Bt=()=>{const t=document.createElement("button");return t.classList.add("project-add-btn"),t.textContent="Add",Zt(t),t},Rt=t=>{const e=document.createElement("div");return e.classList.add("color-div"),e.style.background=t,e},Jt=()=>{const t=document.createElement("img");return t.classList.add("project-remove-img"),t.src="icons/delete.svg",t};class It{constructor(t,e){this.name=t,this.color=e,this.tasks=[]}}let _t=[{name:"Inbox",tasks:[]},{name:"Today",tasks:[]}];_t[0];const Vt=()=>{let t=_t[_t.length-1];ne.appendChild(((t,e)=>{const n=document.createElement("div");return n.classList.add("project"),n.appendChild((t=>{const e=document.createElement("div");return e.classList.add("project-color-container"),e.appendChild(Rt(t)),e})(e)),n.appendChild((t=>{const e=document.createElement("div");return e.classList.add("project-name-container"),e.textContent=t,e})(t)),n.appendChild((()=>{const t=document.createElement("button");return t.classList.add("project-remove-btn"),t.appendChild(Jt()),t})()),n})(t.name,t.color))};let $t,Kt;const Zt=t=>{ee(t),t.addEventListener("click",(()=>{if(!te())return;let t=new It($t.value,Kt.value);_t.push(t),Vt(),Wt(),console.log(_t)}))},te=()=>""!==$t.value,ee=t=>{$t.addEventListener("input",(()=>""!==$t.value?t.classList.add("valid"):t.classList.remove("valid")))};let ne;const ae=()=>{const t=document.createElement("div");return t.classList.add("inbox","active-project"),t.appendChild(re()),t.appendChild(ie()),t},re=()=>{const t=document.createElement("img");return t.classList.add("inbox-icon"),t.src="icons/inbox.svg",t},ie=()=>{const t=document.createElement("div");return t.classList.add("inbox-text"),t.textContent="Inbox",t},oe=()=>{const t=document.createElement("div");return t.classList.add("today-list"),t.appendChild(de()),t.appendChild(se()),t},de=()=>{const t=document.createElement("img");return t.classList.add("today-icon"),t.src="icons/today.svg",t},se=()=>{const t=document.createElement("div");return t.classList.add("today-text"),t.textContent="Today",t},ce=t=>{const e=document.createElement("div");return e.classList.add("projects-container"),e.appendChild(ue()),e.appendChild(le(t)),(t=>{const e=t.lastElementChild;t.addEventListener("mouseover",(()=>e.classList.remove("invisible"))),t.addEventListener("mouseout",(()=>e.classList.add("invisible"))),(t=>{let e=t.firstElementChild;t.addEventListener("mouseover",(()=>e.src="icons/plus-black.svg")),t.addEventListener("mouseout",(()=>e.src="icons/plus.svg"))})(e)})(e),e},ue=()=>{const t=document.createElement("div");return t.classList.add("projects-text"),t.textContent="Projects",t},le=t=>{const e=document.createElement("button");return e.classList.add("addproject-btn","invisible"),e.appendChild(me()),((t,e)=>{t.addEventListener("click",(()=>(t=>{const e=document.createElement("div");e.classList.add("modal"),e.appendChild(jt()),Yt=e,window.onclick=t=>{t.target===Yt&&Wt()},t.appendChild(e)})(e)))})(e,t.parentElement),e},me=()=>{const t=document.createElement("img");return t.classList.add("addproject-icon"),t.src="icons/plus.svg",t},he=()=>{const t=document.createElement("div");return t.classList.add("project-name"),t.textContent=_t[0].name,t},ve=()=>{const t=document.createElement("div");return t.classList.add("priorityhigh-container","invisible"),t.appendChild(fe()),t},fe=()=>{const t=document.createElement("div");return t.classList.add("priorityhigh-text"),t.textContent="Priority High",t},pe=()=>{const t=document.createElement("div");return t.classList.add("prioritymedium-container","invisible"),t.appendChild(ge()),t},ge=()=>{const t=document.createElement("div");return t.classList.add("prioritymedium-text"),t.textContent="Priority Medium",t},we=()=>{const t=document.createElement("div");return t.classList.add("prioritylow-container","invisible"),t.appendChild(be()),t},be=()=>{const t=document.createElement("div");return t.classList.add("prioritylow-text"),t.textContent="Priority Low",t};let Ce;const ye=document.querySelector("#container");(t=>{const e=document.createElement("div");e.classList.add("header"),t.appendChild(e),e.appendChild((()=>{const t=document.createElement("img");return t.classList.add("checklist-icon"),t.src="icons/checklist.svg",t})()),e.appendChild((()=>{const t=document.createElement("div");return t.classList.add("title"),t.textContent="Todo List",t})())})(ye),(t=>{const e=document.createElement("div");e.classList.add("content"),t.appendChild(e),Ce=e})(ye),(t=>{const e=document.createElement("div");e.classList.add("sidebar"),t.appendChild(e),e.appendChild((()=>{const t=document.createElement("div");return t.classList.add("top-menu"),t.appendChild(ae()),t.appendChild(oe()),t})()),e.appendChild((t=>{const e=document.createElement("div");return e.classList.add("project-menu"),e.appendChild(ce(t)),ne=e,e})(t))})(Ce),(t=>{const e=document.createElement("div");e.classList.add("todolist-container"),t.appendChild(e),e.appendChild((()=>{const t=document.createElement("div");return t.classList.add("todolist"),t.appendChild(he()),t.appendChild(ve()),t.appendChild(pe()),t.appendChild(we()),t.appendChild(Tt()),t})())})(Ce)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,