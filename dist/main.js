(()=>{"use strict";var e={d:(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{g:()=>Ft});const t=e=>{const t=document.createElement("div");return t.classList.add("color-div"),t.style.background=e,t},n=()=>{const e=document.createElement("img");return e.classList.add("project-remove-img"),e.src="icons/delete.svg",e};let a,r;const i=()=>{const e=document.createElement("div");return e.classList.add("todolist"),e.appendChild(o()),e.appendChild(Me()),a=e,e},o=()=>{const e=document.createElement("div");return e.classList.add("project-name"),e.textContent=l.name,e};class s{constructor(e,t,n,a){this.name=e,this.desc=t,this.dueDate=n,this.priority=a,this.elm="",this.checklist=""}}const d=e=>{w.insertAdjacentElement("afterend",at({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))};class c{constructor(e,t){this.name=e,this.color=t,this.tasks=[],this.elm=""}}let l,u=[];const m=()=>{let e=u[u.length-1];Mt.appendChild(((e,a,r)=>{const i=document.createElement("div");return i.classList.add("project"),i.appendChild((e=>{const n=document.createElement("div");return n.classList.add("project-color-container"),n.appendChild(t(e)),n})(r)),i.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-name-container"),t.textContent=e,t})(a)),i.appendChild((e=>{const t=document.createElement("button");return t.classList.add("project-remove-btn","invisible"),t.appendChild(n()),Ke(t,e),t})(i)),e.elm=i,h(i),yt(i),i})(e,e.name,e.color))},h=e=>{e.addEventListener("click",(()=>{e.classList.contains("active-project")||0===u.filter((t=>e===t.elm)).length||(l=u.filter((t=>e===t.elm)),l=l[0],v())}))},v=()=>{u.forEach((e=>e.elm.classList.remove("active-project"))),l.elm.classList.add("active-project"),Ve(),r.appendChild(i()),(()=>{for(const e of a.childNodes)e.classList.contains("task-add")&&e.remove()})(),l.tasks.forEach((e=>a.appendChild(at({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)))),a.appendChild(Me()),Le()};let f,p;const g=e=>e.replace(/-/gm," ").split(" ").reverse().join("-");let w;const b=e=>{const t=document.createElement("div");return t.classList.add("todo-form"),w=t,t.appendChild(C()),t.appendChild(y()),t.appendChild(E()),t.appendChild(T(e)),t},C=()=>{const e=document.createElement("input");return e.classList.add("taskname-input"),e.placeholder="Task name",Ce.push(e),console.log(Ce),e},y=()=>{const e=document.createElement("input");return e.classList.add("taskdescription-input"),e.placeholder="Description",Ce.push(e),e},E=()=>{const e=document.createElement("div");return e.classList.add("taskdetails-container"),e.appendChild(k()),e.appendChild(L()),e},k=()=>{const e=document.createElement("input");return e.classList.add("duedate-input"),e.type="date",Ce.push(e),e},L=()=>{const e=document.createElement("select");e.classList.add("priority-select");const t=document.createElement("option");t.textContent="Priority Low",t.value="low";const n=document.createElement("option");n.textContent="Priority Medium",n.value="medium";const a=document.createElement("option");return a.textContent="Priority High",a.value="high",e.add(t),e.add(n),e.add(a),Ce.push(e),e},T=e=>{const t=document.createElement("div");return t.classList.add("buttons-container"),t.appendChild(x(e)),t.appendChild(M(e)),t},x=e=>{const t=document.createElement("button");return t.classList.add("cancel-btn"),t.textContent="Cancel",Re(t,e),t},M=e=>{const t=document.createElement("button");return t.classList.add("addtask-btn"),e&&(t.textContent="Save"),e||(t.textContent="Add task"),be=t,ye(e),((e,t)=>{t&&(ke(t),e.addEventListener("click",(()=>{Ee()&&t&&(f.name=Ce[0].value,f.desc=Ce[1].value,f.dueDate=Te(Ce[2].value),f.priority=Ce[3].value,d(f),Je(t),Le())})))})(t,e),t};function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}function P(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function S(e){P(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===D(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function U(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function W(e){P(1,arguments);var t=S(e),n=t.getUTCDay(),a=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function j(e){P(1,arguments);var t=S(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=W(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=W(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}var Y={};function O(){return Y}function N(e,t){var n,a,r,i,o,s,d,c;P(1,arguments);var l=O(),u=U(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==a?a:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=S(e),h=m.getUTCDay(),v=(h<u?7:0)+h-u;return m.setUTCDate(m.getUTCDate()-v),m.setUTCHours(0,0,0,0),m}function q(e,t){var n,a,r,i,o,s,d,c;P(1,arguments);var l=S(e),u=l.getUTCFullYear(),m=O(),h=U(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==a?a:null===(d=m.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(u+1,0,h),v.setUTCHours(0,0,0,0);var f=N(v,t),p=new Date(0);p.setUTCFullYear(u,0,h),p.setUTCHours(0,0,0,0);var g=N(p,t);return l.getTime()>=f.getTime()?u+1:l.getTime()>=g.getTime()?u:u-1}function F(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const H=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return F("yy"===t?a%100:a,t.length)},A=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):F(n+1,2)},z=function(e,t){return F(e.getUTCDate(),t.length)},Q=function(e,t){return F(e.getUTCHours()%12||12,t.length)},G=function(e,t){return F(e.getUTCHours(),t.length)},X=function(e,t){return F(e.getUTCMinutes(),t.length)},B=function(e,t){return F(e.getUTCSeconds(),t.length)},R=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return F(Math.floor(a*Math.pow(10,n-3)),t.length)};var J={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return H(e,t)},Y:function(e,t,n,a){var r=q(e,a),i=r>0?r:1-r;return"YY"===t?F(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):F(i,t.length)},R:function(e,t){return F(j(e),t.length)},u:function(e,t){return F(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return F(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return F(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return A(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return F(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=function(e,t){P(1,arguments);var n=S(e),a=N(n,t).getTime()-function(e,t){var n,a,r,i,o,s,d,c;P(1,arguments);var l=O(),u=U(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:l.firstWeekContainsDate)&&void 0!==a?a:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=q(e,t),h=new Date(0);return h.setUTCFullYear(m,0,u),h.setUTCHours(0,0,0,0),N(h,t)}(n,t).getTime();return Math.round(a/6048e5)+1}(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):F(r,t.length)},I:function(e,t,n){var a=function(e){P(1,arguments);var t=S(e),n=W(t).getTime()-function(e){P(1,arguments);var t=j(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),W(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):F(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):z(e,t)},D:function(e,t,n){var a=function(e){P(1,arguments);var t=S(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=n-t.getTime();return Math.floor(a/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):F(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return F(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return F(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return F(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return Q(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):G(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):F(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):F(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):X(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):B(e,t)},S:function(e,t){return R(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return _(r);case"XXXX":case"XX":return $(r);default:return $(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return _(r);case"xxxx":case"xx":return $(r);default:return $(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+I(r,":");default:return"GMT"+$(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+I(r,":");default:return"GMT"+$(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return F(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return F((a._originalDate||e).getTime(),t.length)}};function I(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+F(i,2)}function _(e,t){return e%60==0?(e>0?"-":"+")+F(Math.abs(e)/60,2):$(e,t)}function $(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+F(Math.floor(r/60),2)+n+F(r%60,2)}const V=J;var K=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},Z=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},ee={p:Z,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return K(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",K(r,t)).replace("{{time}}",Z(i,t))}};const te=ee;var ne=["D","DD"],ae=["YY","YYYY"];function re(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ie={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function oe(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var se,de={date:oe({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:oe({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:oe({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},ce={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function le(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[s]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function ue(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,s=i[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return o=e.valueCallback?e.valueCallback(c):c,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(s.length)}}}const me={code:"en-US",formatDistance:function(e,t,n){var a,r=ie[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:de,formatRelative:function(e,t,n,a){return ce[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:le({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:le({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:le({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:le({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:le({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(se={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(se.matchPattern);if(!n)return null;var a=n[0],r=e.match(se.parsePattern);if(!r)return null;var i=se.valueCallback?se.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(a.length)}}),era:ue({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ue({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ue({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ue({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ue({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var he=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ve=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fe=/^'([^]*?)'?$/,pe=/''/g,ge=/[a-zA-Z]/;function we(e,t,n){var a,r,i,o,s,d,c,l,u,m,h,v,f,p,g,w,b,C;P(2,arguments);var y=String(t),E=O(),k=null!==(a=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:E.locale)&&void 0!==a?a:me,L=U(null!==(i=null!==(o=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==o?o:null===(u=E.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=U(null!==(h=null!==(v=null!==(f=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(w=g.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:E.weekStartsOn)&&void 0!==v?v:null===(b=E.locale)||void 0===b||null===(C=b.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==h?h:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!k.localize)throw new RangeError("locale must contain localize property");if(!k.formatLong)throw new RangeError("locale must contain formatLong property");var x=S(e);if(!function(e){if(P(1,arguments),!function(e){return P(1,arguments),e instanceof Date||"object"===D(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=S(e);return!isNaN(Number(t))}(x))throw new RangeError("Invalid time value");var M=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(x),W=function(e,t){return P(2,arguments),function(e,t){P(2,arguments);var n=S(e).getTime(),a=U(t);return new Date(n+a)}(e,-U(t))}(x,M),j={firstWeekContainsDate:L,weekStartsOn:T,locale:k,_originalDate:x};return y.match(ve).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,te[t])(e,k.formatLong):e})).join("").match(he).map((function(a){if("''"===a)return"'";var r,i,o=a[0];if("'"===o)return(i=(r=a).match(fe))?i[1].replace(pe,"'"):r;var s,d=V[o];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=a,-1===ae.indexOf(s))||re(a,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==ne.indexOf(e)}(a)||re(a,t,String(e)),d(W,a,k.localize,j);if(o.match(ge))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}let be,Ce=[];const ye=e=>{e||(ke(e),be.addEventListener("click",(()=>{if(!Ee()||e)return;""===Ce[2].value&&(Ce[2].value=xe());let t=new s(Ce[0].value,Ce[1].value,Te(Ce[2].value),Ce[3].value);l.tasks.push(t),(()=>{let e=l.tasks[l.tasks.length-1];a.appendChild(at({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))})(),Je(e),Le()})))},Ee=()=>""!==Ce[0].value,ke=e=>{e&&be.classList.add("valid"),Ce[0].addEventListener("input",(()=>""!==Ce[0].value?be.classList.add("valid"):be.classList.remove("valid")))},Le=()=>{Ce=[]},Te=e=>we(new Date(e),"dd-MM-yyyy"),xe=()=>we(new Date,"yyyy-MM-dd"),Me=()=>{const e=document.createElement("div");return e.classList.add("task-add"),e.appendChild(De()),e.appendChild(Se()),(e=>{e.addEventListener("click",(()=>{p=!1,e.parentElement.appendChild(b(p)),e.remove()}))})(e),e},De=()=>{const e=document.createElement("div");return e.classList.add("task-add-btn"),e.appendChild(Pe()),e},Pe=()=>{const e=document.createElement("img");return e.classList.add("task-add-icon"),e.src="icons/plus-green.svg",e},Se=()=>{const e=document.createElement("div");return e.classList.add("task-add-text"),e.textContent="Add task",e};let Ue,We;let je;const Ye=()=>{const e=document.createElement("div");return e.classList.add("modal-content"),e.appendChild(Oe()),e.appendChild(Ne()),e.appendChild(Ge()),e},Oe=()=>{const e=document.createElement("div");return e.classList.add("header-modal"),e.textContent="Add project",e},Ne=()=>{const e=document.createElement("div");return e.classList.add("inputs-wrapper"),e.appendChild(qe()),e.appendChild(Ae()),e},qe=()=>{const e=document.createElement("div");return e.classList.add("inputname-container"),e.appendChild(Fe()),e.appendChild(He()),e},Fe=()=>{const e=document.createElement("div");return e.classList.add("inputname-label"),e.textContent="Name",e},He=()=>{const e=document.createElement("input");return e.classList.add("projectname-input"),Ue=e,e},Ae=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-container"),e.appendChild(ze()),e.appendChild(Qe()),e},ze=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-label"),e.textContent="Color",e},Qe=()=>{const e=document.createElement("input");return e.type="color",e.classList.add("projectcolor-input"),We=e,e},Ge=()=>{const e=document.createElement("div");return e.classList.add("projectbuttons-container"),e.appendChild(Xe()),e.appendChild(Be()),e},Xe=()=>{const e=document.createElement("button");return e.classList.add("project-cancel-btn"),e.textContent="Cancel",Ie(e),e},Be=()=>{const e=document.createElement("button");return e.classList.add("project-add-btn"),e.textContent="Add",(e=>{(e=>{Ue.addEventListener("input",(()=>""!==Ue.value?e.classList.add("valid"):e.classList.remove("valid")))})(e),e.addEventListener("click",(()=>{if(""===Ue.value)return;let e=new c(Ue.value,We.value);u.push(e),m(),$e()}))})(e),e},Re=(e,t)=>{e.addEventListener("click",(()=>{t&&d(f),Je(t)}))},Je=e=>{e||a.appendChild(Me()),Le(),w.remove()},Ie=e=>{e.addEventListener("click",(()=>$e()))},_e=()=>{window.onclick=e=>{e.target===je&&$e()}},$e=()=>{je.remove()},Ve=()=>{a.remove()},Ke=(e,t)=>{e.addEventListener("click",(()=>{u.forEach(((e,n)=>{e.elm===t&&(u.splice(n,1),(e=>{l.elm===e&&(l=u[0],v())})(t),Ze(t))}))}))},Ze=e=>{e.remove()};let et,tt,nt;const at=(e,t,n)=>{const a=document.createElement("div");return a.classList.add("task"),a.appendChild(rt(t,n)),a.appendChild(dt(e)),a.appendChild(mt()),a.appendChild(ft(a)),nt=a,bt(),n.elm=a,(()=>{let e=wt[wt.length-1];e.edit.addEventListener("click",(()=>{p=!0;let t=l.tasks.filter((t=>t.elm===e.task));t=t[0],f=t,e.task.insertAdjacentElement("afterend",b(p)),(e=>{Ce[0].value=e.name,Ce[1].value=e.desc,Ce[2].value=g(e.dueDate),Ce[3].value=e.priority})(t),Ze(e.task)}))})(),(()=>{const e=l.tasks[l.tasks.length-1],t=e.checklist.firstElementChild;e.checklist.addEventListener("click",(()=>{t.classList.add(`${e.priority}`),t.style.animation="check 250ms linear"})),t.addEventListener("animationend",(()=>{l.tasks.splice(e,1),Ze(e.elm)}))})(),a},rt=(e,t)=>{const n=document.createElement("div");return n.classList.add("checklist-wrapper"),n.appendChild(it(e,t)),n},it=(e,t)=>{const n=document.createElement("button");return n.classList.add("checklist-btn"),n.appendChild(ot(e)),n.appendChild(st(e)),t.checklist=n,Lt(n,e),n},ot=e=>{const t=document.createElement("img");return t.classList.add("checklist-img"),t.src=`icons/checklist-${e}.svg`,t},st=e=>{const t=document.createElement("img");return t.classList.add("check-img","invisible"),t.src=`icons/check-${e}.svg`,t},dt=e=>{const{name:t,desc:n,dueDate:a}=e,r=document.createElement("div");return r.classList.add("taskinfo-wrapper"),r.appendChild(ct(t)),r.appendChild(lt(n)),r.appendChild(ut(a)),r},ct=e=>{const t=document.createElement("div");return t.classList.add("name-container"),t.textContent=e,t},lt=e=>{const t=document.createElement("div");return t.classList.add("desc-container"),t.textContent=e,t},ut=e=>{const t=document.createElement("div");return t.classList.add("duedate-container"),t.textContent=e,t},mt=()=>{const e=document.createElement("div");return e.classList.add("edit-container"),e.appendChild(ht()),e},ht=()=>{const e=document.createElement("button");return e.classList.add("edit-btn","invisible"),e.appendChild(vt()),et=e,Et(e),e},vt=()=>{const e=document.createElement("img");return e.classList.add("edit-img"),e.src="icons/edit.svg",e},ft=e=>{const t=document.createElement("div");return t.classList.add("remove-container"),t.appendChild(pt(e)),t},pt=e=>{const t=document.createElement("button");return t.classList.add("remove-btn","invisible"),t.appendChild(gt()),tt=t,((e,t)=>{e.addEventListener("click",(()=>{l.tasks.forEach(((e,n)=>{e.elm===t&&(l.tasks.splice(n,1),Ze(t))}))}))})(t,e),kt(t),t},gt=()=>{const e=document.createElement("img");return e.classList.add("remove-img"),e.src="icons/trash.svg",e};let wt=[];const bt=()=>{wt.push({task:nt,edit:et,remove:tt}),wt.forEach((e=>Ct(e.task,e.edit,e.remove)))},Ct=(e,t,n)=>{e.addEventListener("mouseover",(()=>{t.classList.remove("invisible"),n.classList.remove("invisible")})),e.addEventListener("mouseout",(()=>{t.classList.add("invisible"),n.classList.add("invisible")}))},yt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),xt(t,"icons/delete-black.svg","icons/delete.svg")},Et=e=>{xt(e,"icons/edit-black.svg","icons/edit.svg")},kt=e=>{xt(e,"icons/trash-red.svg","icons/trash.svg")},Lt=(e,t)=>{let n,a;"low"===t?(n="icons/checklist-low-hover.svg",a="icons/checklist-low.svg"):"medium"===t?(n="icons/checklist-medium-hover.svg",a="icons/checklist-medium.svg"):"high"===t&&(n="icons/checklist-high-hover.svg",a="icons/checklist-high.svg"),xt(e,n,a),Tt(e)},Tt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible")))},xt=(e,t,n)=>{const a=e.firstElementChild;e.addEventListener("mouseover",(()=>a.src=t)),e.addEventListener("mouseout",(()=>a.src=n))};let Mt;const Dt=()=>{const e=document.createElement("div");return e.classList.add("inbox","active-project"),e.appendChild(Pt()),e.appendChild(St()),u.push({name:"Inbox",tasks:[],elm:e}),h(e),l=u[0],e},Pt=()=>{const e=document.createElement("img");return e.classList.add("inbox-icon"),e.src="icons/inbox.svg",e},St=()=>{const e=document.createElement("div");return e.classList.add("inbox-text"),e.textContent="Inbox",e},Ut=()=>{const e=document.createElement("div");return e.classList.add("today-list"),e.appendChild(Wt()),e.appendChild(jt()),u.push({name:"Today",tasks:[],elm:e}),h(e),e},Wt=()=>{const e=document.createElement("img");return e.classList.add("today-icon"),e.src="icons/today.svg",e},jt=()=>{const e=document.createElement("div");return e.classList.add("today-text"),e.textContent="Today",e},Yt=e=>{const t=document.createElement("div");return t.classList.add("projects-container"),t.appendChild(Ot()),t.appendChild(Nt(e)),(e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),xt(t,"icons/plus-black.svg","icons/plus.svg")})(t),t},Ot=()=>{const e=document.createElement("div");return e.classList.add("projects-text"),e.textContent="Projects",e},Nt=e=>{const t=document.createElement("button");return t.classList.add("addproject-btn","invisible"),t.appendChild(qt()),((e,t)=>{e.addEventListener("click",(()=>(e=>{const t=document.createElement("div");t.classList.add("modal"),t.appendChild(Ye()),je=t,_e(),e.appendChild(t)})(t)))})(t,e.parentElement),t},qt=()=>{const e=document.createElement("img");return e.classList.add("addproject-icon"),e.src="icons/plus.svg",e};let Ft;const Ht=document.querySelector("#container");(e=>{const t=document.createElement("div");t.classList.add("header"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("img");return e.classList.add("checklist-icon"),e.src="icons/checklist.svg",e})()),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("title"),e.textContent="Todo List",e})())})(Ht),(e=>{const t=document.createElement("div");t.classList.add("content"),e.appendChild(t),Ft=t})(Ht),(e=>{const t=document.createElement("div");t.classList.add("sidebar"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("top-menu"),e.appendChild(Dt()),e.appendChild(Ut()),e})()),t.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-menu"),t.appendChild(Yt(e)),Mt=t,t})(e))})(Ft),(e=>{const t=document.createElement("div");t.classList.add("todolist-container"),e.appendChild(t),t.appendChild(i()),r=t})(Ft)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,