(()=>{"use strict";var e={d:(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{g:()=>_t});const t=e=>{const t=document.createElement("div");return t.classList.add("color-div"),t.style.background=e,t},n=()=>{const e=document.createElement("img");return e.classList.add("project-remove-img"),e.src="icons/delete.svg",e};let a,r,i,o,s;const d=()=>{const e=document.createElement("div");return e.classList.add("todolist"),e.appendChild(c()),e.appendChild(u()),e.appendChild(l()),e.appendChild(m()),e.appendChild(qe()),a=e,e},c=()=>{const e=document.createElement("div");return e.classList.add("project-name"),e.textContent=b.name,e},u=()=>{const e=document.createElement("div");return e.classList.add("high-priority-container"),i=e,e},l=()=>{const e=document.createElement("div");return e.classList.add("medium-priority-container"),o=e,e},m=()=>{const e=document.createElement("div");return e.classList.add("low-priority-container"),s=e,e},h=()=>{const e=new Date;return`${String(e.getDate()).padStart(2,"0")}-${String(e.getMonth()+1).padStart(2,"0")}-${e.getFullYear()}`};class v{constructor(e,t,n,a){this.name=e,this.desc=t,this.dueDate=n,this.priority=a,this.elm="",this.checklist=""}}const f=()=>{(()=>{const e=y.find((e=>"Today"===e.name));e.tasks=e.tasks.concat((e=>{const t=[],n=(e=>{const t=[];return y.forEach((n=>{n!==e&&n.tasks.forEach((e=>{e.dueDate===h()&&t.push(e)}))})),t})(e);return n.forEach((n=>{e.tasks.includes(n)||t.push(n)})),t})(e)),(e=>{e.tasks.forEach(((t,n)=>{t.dueDate!==h()&&e.tasks.splice(n,1)}))})(e)})(),b.tasks.forEach((e=>g(e))),a.appendChild(qe())},p=(e,t)=>{if(void 0!==t&&e.priority!==t.priority)return g(e);M.insertAdjacentElement("afterend",ht({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))},g=e=>{"high"===e.priority&&i.appendChild(ht({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)),"medium"===e.priority&&o.appendChild(ht({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)),"low"===e.priority&&s.appendChild(ht({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))};class w{constructor(e,t){this.name=e,this.color=t,this.tasks=[],this.elm=""}}let b,y=[];const C=()=>{let e=y[y.length-1];Ht.appendChild(((e,a,r)=>{const i=document.createElement("div");return i.classList.add("project"),i.appendChild((e=>{const n=document.createElement("div");return n.classList.add("project-color-container"),n.appendChild(t(e)),n})(r)),i.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-name-container"),t.textContent=e,t})(a)),i.appendChild((e=>{const t=document.createElement("button");return t.classList.add("project-remove-btn","invisible"),t.appendChild(n()),dt(t,e),t})(i)),e.elm=i,E(i),Wt(i),i})(e,e.name,e.color))},E=e=>{e.addEventListener("click",(()=>{e.classList.contains("active-project")||0===y.filter((t=>e===t.elm)).length||(b=y.filter((t=>e===t.elm)),b=b[0],k())}))},k=()=>{y.forEach((e=>e.elm.classList.remove("active-project"))),b.elm.classList.add("active-project"),st(),r.appendChild(d()),(()=>{for(const e of a.childNodes)e.classList.contains("task-add")&&e.remove()})(),f(),Ye(),T=!1};let L,T;const x=e=>e.replace(/-/gm," ").split(" ").reverse().join("-"),D=e=>{if(!T)return;const t=y.find((e=>"Today"===e.name));We(T),e.addEventListener("click",(()=>{if(!je()||!T)return;const e={...L};if(L.name=Pe[0].value,L.desc=Pe[1].value,L.dueDate=Oe(Pe[2].value),L.priority=Pe[3].value,b===t&&L.dueDate!==h())return at(),Ye(),ct(L.elm),void(T=!1);p(L,e),at(),Ye(),T=!1}))};let M;const S=e=>{const t=document.createElement("div");return t.classList.add("todo-form"),M=t,t.appendChild(P()),t.appendChild(U()),t.appendChild(j()),t.appendChild(O(e)),t},P=()=>{const e=document.createElement("input");return e.classList.add("taskname-input"),e.placeholder="Task name",Pe.push(e),e},U=()=>{const e=document.createElement("input");return e.classList.add("taskdescription-input"),e.placeholder="Description",Pe.push(e),e},j=()=>{const e=document.createElement("div");return e.classList.add("taskdetails-container"),e.appendChild(W()),e.appendChild(Y()),e},W=()=>{const e=document.createElement("input");return e.classList.add("duedate-input"),e.type="date",Pe.push(e),e},Y=()=>{const e=document.createElement("select");e.classList.add("priority-select");const t=document.createElement("option");t.textContent="Priority Low",t.value="low";const n=document.createElement("option");n.textContent="Priority Medium",n.value="medium";const a=document.createElement("option");return a.textContent="Priority High",a.value="high",e.add(t),e.add(n),e.add(a),Pe.push(e),e},O=e=>{const t=document.createElement("div");return t.classList.add("buttons-container"),t.appendChild(N(e)),t.appendChild(q(e)),t},N=e=>{const t=document.createElement("button");return t.classList.add("cancel-btn"),t.textContent="Cancel",nt(t,e),t},q=e=>{const t=document.createElement("button");return t.classList.add("addtask-btn"),e&&(t.textContent="Save"),e||(t.textContent="Add task"),Se=t,Ue(e),D(t),t};function F(e){return F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},F(e)}function H(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function A(e){H(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===F(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function z(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function Q(e){H(1,arguments);var t=A(e),n=t.getUTCDay(),a=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function G(e){H(1,arguments);var t=A(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=Q(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=Q(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}var X={};function B(){return X}function R(e,t){var n,a,r,i,o,s,d,c;H(1,arguments);var u=B(),l=z(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:u.weekStartsOn)&&void 0!==a?a:null===(d=u.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=A(e),h=m.getUTCDay(),v=(h<l?7:0)+h-l;return m.setUTCDate(m.getUTCDate()-v),m.setUTCHours(0,0,0,0),m}function I(e,t){var n,a,r,i,o,s,d,c;H(1,arguments);var u=A(e),l=u.getUTCFullYear(),m=B(),h=z(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==a?a:null===(d=m.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(l+1,0,h),v.setUTCHours(0,0,0,0);var f=R(v,t),p=new Date(0);p.setUTCFullYear(l,0,h),p.setUTCHours(0,0,0,0);var g=R(p,t);return u.getTime()>=f.getTime()?l+1:u.getTime()>=g.getTime()?l:l-1}function J(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const $=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return J("yy"===t?a%100:a,t.length)},_=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):J(n+1,2)},V=function(e,t){return J(e.getUTCDate(),t.length)},K=function(e,t){return J(e.getUTCHours()%12||12,t.length)},Z=function(e,t){return J(e.getUTCHours(),t.length)},ee=function(e,t){return J(e.getUTCMinutes(),t.length)},te=function(e,t){return J(e.getUTCSeconds(),t.length)},ne=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return J(Math.floor(a*Math.pow(10,n-3)),t.length)};var ae={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return $(e,t)},Y:function(e,t,n,a){var r=I(e,a),i=r>0?r:1-r;return"YY"===t?J(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):J(i,t.length)},R:function(e,t){return J(G(e),t.length)},u:function(e,t){return J(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return J(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return J(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return _(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return J(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=function(e,t){H(1,arguments);var n=A(e),a=R(n,t).getTime()-function(e,t){var n,a,r,i,o,s,d,c;H(1,arguments);var u=B(),l=z(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==a?a:null===(d=u.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=I(e,t),h=new Date(0);return h.setUTCFullYear(m,0,l),h.setUTCHours(0,0,0,0),R(h,t)}(n,t).getTime();return Math.round(a/6048e5)+1}(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):J(r,t.length)},I:function(e,t,n){var a=function(e){H(1,arguments);var t=A(e),n=Q(t).getTime()-function(e){H(1,arguments);var t=G(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),Q(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):J(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):V(e,t)},D:function(e,t,n){var a=function(e){H(1,arguments);var t=A(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=n-t.getTime();return Math.floor(a/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):J(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return J(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return J(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return J(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return K(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Z(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):J(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):J(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):ee(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):te(e,t)},S:function(e,t){return ne(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return ie(r);case"XXXX":case"XX":return oe(r);default:return oe(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return ie(r);case"xxxx":case"xx":return oe(r);default:return oe(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+re(r,":");default:return"GMT"+oe(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+re(r,":");default:return"GMT"+oe(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return J(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return J((a._originalDate||e).getTime(),t.length)}};function re(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+J(i,2)}function ie(e,t){return e%60==0?(e>0?"-":"+")+J(Math.abs(e)/60,2):oe(e,t)}function oe(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+J(Math.floor(r/60),2)+n+J(r%60,2)}const se=ae;var de=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},ce=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},ue={p:ce,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return de(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",de(r,t)).replace("{{time}}",ce(i,t))}};const le=ue;var me=["D","DD"],he=["YY","YYYY"];function ve(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var fe={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function pe(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var ge,we={date:pe({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:pe({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:pe({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},be={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ye(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[s]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function Ce(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,s=i[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return o=e.valueCallback?e.valueCallback(c):c,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(s.length)}}}const Ee={code:"en-US",formatDistance:function(e,t,n){var a,r=fe[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:we,formatRelative:function(e,t,n,a){return be[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ye({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ye({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:ye({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ye({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ye({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(ge={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(ge.matchPattern);if(!n)return null;var a=n[0],r=e.match(ge.parsePattern);if(!r)return null;var i=ge.valueCallback?ge.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(a.length)}}),era:Ce({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Ce({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Ce({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Ce({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Ce({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var ke=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Le=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Te=/^'([^]*?)'?$/,xe=/''/g,De=/[a-zA-Z]/;function Me(e,t,n){var a,r,i,o,s,d,c,u,l,m,h,v,f,p,g,w,b,y;H(2,arguments);var C=String(t),E=B(),k=null!==(a=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:E.locale)&&void 0!==a?a:Ee,L=z(null!==(i=null!==(o=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==o?o:null===(l=E.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=z(null!==(h=null!==(v=null!==(f=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(w=g.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:E.weekStartsOn)&&void 0!==v?v:null===(b=E.locale)||void 0===b||null===(y=b.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==h?h:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!k.localize)throw new RangeError("locale must contain localize property");if(!k.formatLong)throw new RangeError("locale must contain formatLong property");var x=A(e);if(!function(e){if(H(1,arguments),!function(e){return H(1,arguments),e instanceof Date||"object"===F(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=A(e);return!isNaN(Number(t))}(x))throw new RangeError("Invalid time value");var D=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(x),M=function(e,t){return H(2,arguments),function(e,t){H(2,arguments);var n=A(e).getTime(),a=z(t);return new Date(n+a)}(e,-z(t))}(x,D),S={firstWeekContainsDate:L,weekStartsOn:T,locale:k,_originalDate:x};return C.match(Le).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,le[t])(e,k.formatLong):e})).join("").match(ke).map((function(a){if("''"===a)return"'";var r,i,o=a[0];if("'"===o)return(i=(r=a).match(Te))?i[1].replace(xe,"'"):r;var s,d=se[o];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=a,-1===he.indexOf(s))||ve(a,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==me.indexOf(e)}(a)||ve(a,t,String(e)),d(M,a,k.localize,S);if(o.match(De))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}let Se,Pe=[];const Ue=e=>{if(e)return;const t=y.find((e=>"Inbox"===e.name)),n=y.find((e=>"Today"===e.name));We(e),Se.addEventListener("click",(()=>{if(!je()||e)return;""===Pe[2].value&&(Pe[2].value=Ne());let a=new v(Pe[0].value,Pe[1].value,Oe(Pe[2].value),Pe[3].value);if(b===n&&(t.tasks.push(a),a.dueDate!==h()))return at(),void Ye();b.tasks.push(a),(()=>{let e=b.tasks[b.tasks.length-1];g(e)})(),at(),Ye()}))},je=()=>""!==Pe[0].value,We=e=>{e&&Se.classList.add("valid"),Pe[0].addEventListener("input",(()=>""!==Pe[0].value?Se.classList.add("valid"):Se.classList.remove("valid")))},Ye=()=>{Pe=[]},Oe=e=>Me(new Date(e),"dd-MM-yyyy"),Ne=()=>Me(new Date,"yyyy-MM-dd"),qe=()=>{const e=document.createElement("div");return e.classList.add("task-add"),e.appendChild(Fe()),e.appendChild(Ae()),(e=>{e.addEventListener("click",(()=>{if(T)return p(L),void at();e.parentElement.appendChild(S(T)),e.remove()}))})(e),e},Fe=()=>{const e=document.createElement("div");return e.classList.add("task-add-btn"),e.appendChild(He()),e},He=()=>{const e=document.createElement("img");return e.classList.add("task-add-icon"),e.src="icons/plus-green.svg",e},Ae=()=>{const e=document.createElement("div");return e.classList.add("task-add-text"),e.textContent="Add task",e};let ze,Qe;let Ge;const Xe=()=>{const e=document.createElement("div");return e.classList.add("modal-content"),e.appendChild(Be()),e.appendChild(Re()),e.appendChild(Ze()),e},Be=()=>{const e=document.createElement("div");return e.classList.add("header-modal"),e.textContent="Add project",e},Re=()=>{const e=document.createElement("div");return e.classList.add("inputs-wrapper"),e.appendChild(Ie()),e.appendChild(_e()),e},Ie=()=>{const e=document.createElement("div");return e.classList.add("inputname-container"),e.appendChild(Je()),e.appendChild($e()),e},Je=()=>{const e=document.createElement("div");return e.classList.add("inputname-label"),e.textContent="Name",e},$e=()=>{const e=document.createElement("input");return e.classList.add("projectname-input"),ze=e,e},_e=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-container"),e.appendChild(Ve()),e.appendChild(Ke()),e},Ve=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-label"),e.textContent="Color",e},Ke=()=>{const e=document.createElement("input");return e.type="color",e.classList.add("projectcolor-input"),Qe=e,e},Ze=()=>{const e=document.createElement("div");return e.classList.add("projectbuttons-container"),e.appendChild(et()),e.appendChild(tt()),e},et=()=>{const e=document.createElement("button");return e.classList.add("project-cancel-btn"),e.textContent="Cancel",rt(e),e},tt=()=>{const e=document.createElement("button");return e.classList.add("project-add-btn"),e.textContent="Add",(e=>{(e=>{ze.addEventListener("input",(()=>""!==ze.value?e.classList.add("valid"):e.classList.remove("valid")))})(e),e.addEventListener("click",(()=>{if(""===ze.value)return;let e=new w(ze.value,Qe.value);y.push(e),C(),ot()}))})(e),e},nt=e=>{e.addEventListener("click",(()=>{T&&p(L),at()}))},at=()=>{T||a.appendChild(qe()),Ye(),M.remove(),T=!1},rt=e=>{e.addEventListener("click",(()=>ot()))},it=()=>{window.onclick=e=>{e.target===Ge&&ot()}},ot=()=>{Ge.remove()},st=()=>{a.remove()},dt=(e,t)=>{e.addEventListener("click",(()=>{y.forEach(((e,n)=>{e.elm===t&&(y.splice(n,1),(e=>{b.elm===e&&(b=y[0],k())})(t),ct(t))}))}))},ct=e=>{e.remove()};let ut,lt,mt;const ht=(e,t,n)=>{const a=document.createElement("div");return a.classList.add("task"),n.elm=a,a.appendChild(vt(t,n)),a.appendChild(wt(e,n)),a.appendChild(Lt(n)),a.appendChild(Dt(n)),mt=a,Ut(),a},vt=(e,t)=>{const n=document.createElement("div");return n.classList.add("checklist-wrapper"),n.appendChild(ft(e,t)),n},ft=(e,t)=>{const n=document.createElement("button");return n.classList.add("checklist-btn"),n.appendChild(pt(e)),n.appendChild(gt(e)),t.checklist=n,Nt(n,e),((e,t)=>{const n=y.find((e=>"Today"===e.name)),a=e.firstElementChild;e.addEventListener("click",(()=>{a.classList.add(`${t.priority}`),a.style.animation="check 250ms linear"})),a.addEventListener("animationend",(()=>{b===n&&y.forEach((e=>{e!==n&&e.tasks.includes(t)&&e.tasks.splice(e.tasks.indexOf(t),1)})),b!==n&&n.tasks.includes(t)&&n.tasks.splice(n.tasks.indexOf(t),1),b.tasks.forEach(((e,n)=>{e.elm===t.elm&&b.tasks.splice(n,1)})),ct(t.elm)}))})(n,t),n},pt=e=>{const t=document.createElement("img");return t.classList.add("checklist-img"),t.src=`icons/checklist-${e}.svg`,t},gt=e=>{const t=document.createElement("img");return t.classList.add("check-img","invisible"),t.src=`icons/check-${e}.svg`,t},wt=(e,t)=>{const{name:n,desc:a,dueDate:r}=e,i=document.createElement("div");return i.classList.add("taskinfo-wrapper"),i.appendChild(bt(n)),i.appendChild(yt(a)),i.appendChild(Ct(r,t)),i},bt=e=>{const t=document.createElement("div");return t.classList.add("name-container"),t.textContent=e,t},yt=e=>{const t=document.createElement("div");return t.classList.add("desc-container"),t.textContent=e,t},Ct=(e,t)=>{const n=document.createElement("div");return n.classList.add("due-date-project-wrapper"),n.appendChild(Et(e)),n.appendChild(kt(t)),n},Et=e=>{const t=document.createElement("div");return t.classList.add("duedate-container"),t.textContent=e,t},kt=e=>{const t=document.createElement("div");return t.classList.add("project-name-task-container"),t.textContent=(e=>{const t=y.find((e=>"Today"===e.name));if(b!==t)return;let n;return y.forEach((a=>{a!==t&&a.tasks.includes(e)&&(n=a.name)})),n})(e),t},Lt=e=>{const t=document.createElement("div");return t.classList.add("edit-container"),t.appendChild(Tt(e)),t},Tt=e=>{const t=document.createElement("button");return t.classList.add("edit-btn","invisible"),t.appendChild(xt()),ut=t,Yt(t),((e,t)=>{e.addEventListener("click",(()=>{T&&(p(L),at()),T=!0;let e=b.tasks.filter((e=>e.elm===t.elm));e=e[0],L=e,t.elm.insertAdjacentElement("afterend",S(T)),(e=>{Pe[0].value=e.name,Pe[1].value=e.desc,Pe[2].value=x(e.dueDate),Pe[3].value=e.priority})(e),ct(t.elm)}))})(t,e),t},xt=()=>{const e=document.createElement("img");return e.classList.add("edit-img"),e.src="icons/edit.svg",e},Dt=e=>{const t=document.createElement("div");return t.classList.add("remove-container"),t.appendChild(Mt(e)),t},Mt=e=>{const t=document.createElement("button");return t.classList.add("remove-btn","invisible"),t.appendChild(St()),lt=t,((e,t)=>{const n=y.find((e=>"Today"===e.name));e.addEventListener("click",(()=>{b===n&&y.forEach((e=>{e!==n&&e.tasks.includes(t)&&e.tasks.splice(e.tasks.indexOf(t),1)})),b!==n&&n.tasks.includes(t)&&n.tasks.splice(n.tasks.indexOf(t),1),b.tasks.forEach(((e,n)=>{e.elm===t.elm&&(b.tasks.splice(n,1),ct(t.elm))}))}))})(t,e),Ot(t),t},St=()=>{const e=document.createElement("img");return e.classList.add("remove-img"),e.src="icons/trash.svg",e};let Pt=[];const Ut=()=>{Pt.push({task:mt,edit:ut,remove:lt}),Pt.forEach((e=>jt(e.task,e.edit,e.remove)))},jt=(e,t,n)=>{e.addEventListener("mouseover",(()=>{t.classList.remove("invisible"),n.classList.remove("invisible")})),e.addEventListener("mouseout",(()=>{t.classList.add("invisible"),n.classList.add("invisible")}))},Wt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),Ft(t,"icons/delete-black.svg","icons/delete.svg")},Yt=e=>{Ft(e,"icons/edit-black.svg","icons/edit.svg")},Ot=e=>{Ft(e,"icons/trash-red.svg","icons/trash.svg")},Nt=(e,t)=>{let n,a;"low"===t?(n="icons/checklist-low-hover.svg",a="icons/checklist-low.svg"):"medium"===t?(n="icons/checklist-medium-hover.svg",a="icons/checklist-medium.svg"):"high"===t&&(n="icons/checklist-high-hover.svg",a="icons/checklist-high.svg"),Ft(e,n,a),qt(e)},qt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible")))},Ft=(e,t,n)=>{const a=e.firstElementChild;e.addEventListener("mouseover",(()=>a.src=t)),e.addEventListener("mouseout",(()=>a.src=n))};let Ht;const At=()=>{const e=document.createElement("div");return e.classList.add("inbox","active-project"),e.appendChild(zt()),e.appendChild(Qt()),y.push({name:"Inbox",tasks:[],elm:e}),E(e),b=y[0],e},zt=()=>{const e=document.createElement("img");return e.classList.add("inbox-icon"),e.src="icons/inbox.svg",e},Qt=()=>{const e=document.createElement("div");return e.classList.add("inbox-text"),e.textContent="Inbox",e},Gt=()=>{const e=document.createElement("div");return e.classList.add("today-list"),e.appendChild(Xt()),e.appendChild(Bt()),y.push({name:"Today",tasks:[],elm:e}),E(e),e},Xt=()=>{const e=document.createElement("img");return e.classList.add("today-icon"),e.src="icons/today.svg",e},Bt=()=>{const e=document.createElement("div");return e.classList.add("today-text"),e.textContent="Today",e},Rt=e=>{const t=document.createElement("div");return t.classList.add("projects-container"),t.appendChild(It()),t.appendChild(Jt(e)),(e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),Ft(t,"icons/plus-black.svg","icons/plus.svg")})(t),t},It=()=>{const e=document.createElement("div");return e.classList.add("projects-text"),e.textContent="Projects",e},Jt=e=>{const t=document.createElement("button");return t.classList.add("addproject-btn","invisible"),t.appendChild($t()),((e,t)=>{e.addEventListener("click",(()=>(e=>{const t=document.createElement("div");t.classList.add("modal"),t.appendChild(Xe()),Ge=t,it(),e.appendChild(t)})(t)))})(t,e.parentElement),t},$t=()=>{const e=document.createElement("img");return e.classList.add("addproject-icon"),e.src="icons/plus.svg",e};let _t;const Vt=document.querySelector("#container");(e=>{const t=document.createElement("div");t.classList.add("header"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("img");return e.classList.add("checklist-icon"),e.src="icons/checklist.svg",e})()),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("title"),e.textContent="Todo List",e})())})(Vt),(e=>{const t=document.createElement("div");t.classList.add("content"),e.appendChild(t),_t=t})(Vt),(e=>{const t=document.createElement("div");t.classList.add("sidebar"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("top-menu"),e.appendChild(At()),e.appendChild(Gt()),e})()),t.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-menu"),t.appendChild(Rt(e)),Ht=t,t})(e))})(_t),(e=>{const t=document.createElement("div");t.classList.add("todolist-container"),e.appendChild(t),t.appendChild(d()),r=t})(_t)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,