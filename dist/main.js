(()=>{"use strict";var e={d:(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{g:()=>Rt});const t=e=>{const t=document.createElement("div");return t.classList.add("color-div"),t.style.background=e,t},n=()=>{const e=document.createElement("img");return e.classList.add("project-remove-img"),e.src="icons/delete.svg",e};let a,r,i,o,s;const d=()=>{const e=document.createElement("div");return e.classList.add("todolist"),e.appendChild(c()),e.appendChild(l()),e.appendChild(u()),e.appendChild(m()),e.appendChild(Oe()),a=e,e},c=()=>{const e=document.createElement("div");return e.classList.add("project-name"),e.textContent=g.name,e},l=()=>{const e=document.createElement("div");return e.classList.add("high-priority-container"),i=e,e},u=()=>{const e=document.createElement("div");return e.classList.add("medium-priority-container"),o=e,e},m=()=>{const e=document.createElement("div");return e.classList.add("low-priority-container"),s=e,e};class h{constructor(e,t,n,a){this.name=e,this.desc=t,this.dueDate=n,this.priority=a,this.elm="",this.checklist=""}}const v=(e,t)=>{if(void 0!==t&&e.priority!==t.priority)return f(e);x.insertAdjacentElement("afterend",ut({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))},f=e=>{"high"===e.priority&&i.appendChild(ut({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)),"medium"===e.priority&&o.appendChild(ut({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)),"low"===e.priority&&s.appendChild(ut({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))};class p{constructor(e,t){this.name=e,this.color=t,this.tasks=[],this.elm=""}}let g,w=[];const b=()=>{let e=w[w.length-1];Ot.appendChild(((e,a,r)=>{const i=document.createElement("div");return i.classList.add("project"),i.appendChild((e=>{const n=document.createElement("div");return n.classList.add("project-color-container"),n.appendChild(t(e)),n})(r)),i.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-name-container"),t.textContent=e,t})(a)),i.appendChild((e=>{const t=document.createElement("button");return t.classList.add("project-remove-btn","invisible"),t.appendChild(n()),ot(t,e),t})(i)),e.elm=i,y(i),Pt(i),i})(e,e.name,e.color))},y=e=>{e.addEventListener("click",(()=>{e.classList.contains("active-project")||0===w.filter((t=>e===t.elm)).length||(g=w.filter((t=>e===t.elm)),g=g[0],C())}))},C=()=>{w.forEach((e=>e.elm.classList.remove("active-project"))),g.elm.classList.add("active-project"),it(),r.appendChild(d()),(()=>{for(const e of a.childNodes)e.classList.contains("task-add")&&e.remove()})(),g.tasks.forEach((e=>f(e))),a.appendChild(Oe()),We()};let E,L;const k=e=>e.replace(/-/gm," ").split(" ").reverse().join("-"),T=e=>{L&&(Ue(L),e.addEventListener("click",(()=>{if(!Se()||!L)return;const e={...E};E.name=De[0].value,E.desc=De[1].value,E.dueDate=je(De[2].value),E.priority=De[3].value,v(E,e),tt(),We(),L=!1})))};let x;const M=e=>{const t=document.createElement("div");return t.classList.add("todo-form"),x=t,t.appendChild(D()),t.appendChild(P()),t.appendChild(S()),t.appendChild(j(e)),t},D=()=>{const e=document.createElement("input");return e.classList.add("taskname-input"),e.placeholder="Task name",De.push(e),e},P=()=>{const e=document.createElement("input");return e.classList.add("taskdescription-input"),e.placeholder="Description",De.push(e),e},S=()=>{const e=document.createElement("div");return e.classList.add("taskdetails-container"),e.appendChild(U()),e.appendChild(W()),e},U=()=>{const e=document.createElement("input");return e.classList.add("duedate-input"),e.type="date",De.push(e),e},W=()=>{const e=document.createElement("select");e.classList.add("priority-select");const t=document.createElement("option");t.textContent="Priority Low",t.value="low";const n=document.createElement("option");n.textContent="Priority Medium",n.value="medium";const a=document.createElement("option");return a.textContent="Priority High",a.value="high",e.add(t),e.add(n),e.add(a),De.push(e),e},j=e=>{const t=document.createElement("div");return t.classList.add("buttons-container"),t.appendChild(Y(e)),t.appendChild(O(e)),t},Y=e=>{const t=document.createElement("button");return t.classList.add("cancel-btn"),t.textContent="Cancel",et(t,e),t},O=e=>{const t=document.createElement("button");return t.classList.add("addtask-btn"),e&&(t.textContent="Save"),e||(t.textContent="Add task"),Me=t,Pe(e),T(t),t};function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function q(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function F(e){q(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===N(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function H(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function A(e){q(1,arguments);var t=F(e),n=t.getUTCDay(),a=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function z(e){q(1,arguments);var t=F(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=A(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=A(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}var Q={};function G(){return Q}function X(e,t){var n,a,r,i,o,s,d,c;q(1,arguments);var l=G(),u=H(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==a?a:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=F(e),h=m.getUTCDay(),v=(h<u?7:0)+h-u;return m.setUTCDate(m.getUTCDate()-v),m.setUTCHours(0,0,0,0),m}function B(e,t){var n,a,r,i,o,s,d,c;q(1,arguments);var l=F(e),u=l.getUTCFullYear(),m=G(),h=H(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==a?a:null===(d=m.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(u+1,0,h),v.setUTCHours(0,0,0,0);var f=X(v,t),p=new Date(0);p.setUTCFullYear(u,0,h),p.setUTCHours(0,0,0,0);var g=X(p,t);return l.getTime()>=f.getTime()?u+1:l.getTime()>=g.getTime()?u:u-1}function R(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const J=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return R("yy"===t?a%100:a,t.length)},I=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):R(n+1,2)},_=function(e,t){return R(e.getUTCDate(),t.length)},$=function(e,t){return R(e.getUTCHours()%12||12,t.length)},V=function(e,t){return R(e.getUTCHours(),t.length)},K=function(e,t){return R(e.getUTCMinutes(),t.length)},Z=function(e,t){return R(e.getUTCSeconds(),t.length)},ee=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return R(Math.floor(a*Math.pow(10,n-3)),t.length)};var te={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return J(e,t)},Y:function(e,t,n,a){var r=B(e,a),i=r>0?r:1-r;return"YY"===t?R(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):R(i,t.length)},R:function(e,t){return R(z(e),t.length)},u:function(e,t){return R(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return R(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return R(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return I(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return R(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=function(e,t){q(1,arguments);var n=F(e),a=X(n,t).getTime()-function(e,t){var n,a,r,i,o,s,d,c;q(1,arguments);var l=G(),u=H(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:l.firstWeekContainsDate)&&void 0!==a?a:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=B(e,t),h=new Date(0);return h.setUTCFullYear(m,0,u),h.setUTCHours(0,0,0,0),X(h,t)}(n,t).getTime();return Math.round(a/6048e5)+1}(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):R(r,t.length)},I:function(e,t,n){var a=function(e){q(1,arguments);var t=F(e),n=A(t).getTime()-function(e){q(1,arguments);var t=z(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),A(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):R(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):_(e,t)},D:function(e,t,n){var a=function(e){q(1,arguments);var t=F(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=n-t.getTime();return Math.floor(a/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):R(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return R(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return R(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return R(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return $(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):V(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):R(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):R(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):K(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):Z(e,t)},S:function(e,t){return ee(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return ae(r);case"XXXX":case"XX":return re(r);default:return re(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return ae(r);case"xxxx":case"xx":return re(r);default:return re(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+ne(r,":");default:return"GMT"+re(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+ne(r,":");default:return"GMT"+re(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return R(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return R((a._originalDate||e).getTime(),t.length)}};function ne(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+R(i,2)}function ae(e,t){return e%60==0?(e>0?"-":"+")+R(Math.abs(e)/60,2):re(e,t)}function re(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+R(Math.floor(r/60),2)+n+R(r%60,2)}const ie=te;var oe=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},se=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},de={p:se,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return oe(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",oe(r,t)).replace("{{time}}",se(i,t))}};const ce=de;var le=["D","DD"],ue=["YY","YYYY"];function me(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var he={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ve(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var fe,pe={date:ve({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ve({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ve({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},ge={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function we(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[s]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function be(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,s=i[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return o=e.valueCallback?e.valueCallback(c):c,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(s.length)}}}const ye={code:"en-US",formatDistance:function(e,t,n){var a,r=he[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:pe,formatRelative:function(e,t,n,a){return ge[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:we({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:we({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:we({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:we({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:we({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(fe={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(fe.matchPattern);if(!n)return null;var a=n[0],r=e.match(fe.parsePattern);if(!r)return null;var i=fe.valueCallback?fe.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(a.length)}}),era:be({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:be({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:be({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:be({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:be({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var Ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ee=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Le=/^'([^]*?)'?$/,ke=/''/g,Te=/[a-zA-Z]/;function xe(e,t,n){var a,r,i,o,s,d,c,l,u,m,h,v,f,p,g,w,b,y;q(2,arguments);var C=String(t),E=G(),L=null!==(a=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:E.locale)&&void 0!==a?a:ye,k=H(null!==(i=null!==(o=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==o?o:null===(u=E.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=H(null!==(h=null!==(v=null!==(f=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(w=g.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:E.weekStartsOn)&&void 0!==v?v:null===(b=E.locale)||void 0===b||null===(y=b.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==h?h:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!L.localize)throw new RangeError("locale must contain localize property");if(!L.formatLong)throw new RangeError("locale must contain formatLong property");var x=F(e);if(!function(e){if(q(1,arguments),!function(e){return q(1,arguments),e instanceof Date||"object"===N(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=F(e);return!isNaN(Number(t))}(x))throw new RangeError("Invalid time value");var M=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(x),D=function(e,t){return q(2,arguments),function(e,t){q(2,arguments);var n=F(e).getTime(),a=H(t);return new Date(n+a)}(e,-H(t))}(x,M),P={firstWeekContainsDate:k,weekStartsOn:T,locale:L,_originalDate:x};return C.match(Ee).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,ce[t])(e,L.formatLong):e})).join("").match(Ce).map((function(a){if("''"===a)return"'";var r,i,o=a[0];if("'"===o)return(i=(r=a).match(Le))?i[1].replace(ke,"'"):r;var s,d=ie[o];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=a,-1===ue.indexOf(s))||me(a,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==le.indexOf(e)}(a)||me(a,t,String(e)),d(D,a,L.localize,P);if(o.match(Te))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}let Me,De=[];const Pe=e=>{e||(Ue(e),Me.addEventListener("click",(()=>{if(!Se()||e)return;""===De[2].value&&(De[2].value=Ye());let t=new h(De[0].value,De[1].value,je(De[2].value),De[3].value);g.tasks.push(t),(()=>{let e=g.tasks[g.tasks.length-1];f(e)})(),tt(),We()})))},Se=()=>""!==De[0].value,Ue=e=>{e&&Me.classList.add("valid"),De[0].addEventListener("input",(()=>""!==De[0].value?Me.classList.add("valid"):Me.classList.remove("valid")))},We=()=>{De=[]},je=e=>xe(new Date(e),"dd-MM-yyyy"),Ye=()=>xe(new Date,"yyyy-MM-dd"),Oe=()=>{const e=document.createElement("div");return e.classList.add("task-add"),e.appendChild(Ne()),e.appendChild(Fe()),(e=>{e.addEventListener("click",(()=>{if(L)return v(E),void tt();e.parentElement.appendChild(M(L)),e.remove()}))})(e),e},Ne=()=>{const e=document.createElement("div");return e.classList.add("task-add-btn"),e.appendChild(qe()),e},qe=()=>{const e=document.createElement("img");return e.classList.add("task-add-icon"),e.src="icons/plus-green.svg",e},Fe=()=>{const e=document.createElement("div");return e.classList.add("task-add-text"),e.textContent="Add task",e};let He,Ae;let ze;const Qe=()=>{const e=document.createElement("div");return e.classList.add("modal-content"),e.appendChild(Ge()),e.appendChild(Xe()),e.appendChild(Ve()),e},Ge=()=>{const e=document.createElement("div");return e.classList.add("header-modal"),e.textContent="Add project",e},Xe=()=>{const e=document.createElement("div");return e.classList.add("inputs-wrapper"),e.appendChild(Be()),e.appendChild(Ie()),e},Be=()=>{const e=document.createElement("div");return e.classList.add("inputname-container"),e.appendChild(Re()),e.appendChild(Je()),e},Re=()=>{const e=document.createElement("div");return e.classList.add("inputname-label"),e.textContent="Name",e},Je=()=>{const e=document.createElement("input");return e.classList.add("projectname-input"),He=e,e},Ie=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-container"),e.appendChild(_e()),e.appendChild($e()),e},_e=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-label"),e.textContent="Color",e},$e=()=>{const e=document.createElement("input");return e.type="color",e.classList.add("projectcolor-input"),Ae=e,e},Ve=()=>{const e=document.createElement("div");return e.classList.add("projectbuttons-container"),e.appendChild(Ke()),e.appendChild(Ze()),e},Ke=()=>{const e=document.createElement("button");return e.classList.add("project-cancel-btn"),e.textContent="Cancel",nt(e),e},Ze=()=>{const e=document.createElement("button");return e.classList.add("project-add-btn"),e.textContent="Add",(e=>{(e=>{He.addEventListener("input",(()=>""!==He.value?e.classList.add("valid"):e.classList.remove("valid")))})(e),e.addEventListener("click",(()=>{if(""===He.value)return;let e=new p(He.value,Ae.value);w.push(e),b(),rt()}))})(e),e},et=e=>{e.addEventListener("click",(()=>{L&&v(E),tt()}))},tt=()=>{L||a.appendChild(Oe()),We(),x.remove(),L=!1},nt=e=>{e.addEventListener("click",(()=>rt()))},at=()=>{window.onclick=e=>{e.target===ze&&rt()}},rt=()=>{ze.remove()},it=()=>{a.remove()},ot=(e,t)=>{e.addEventListener("click",(()=>{w.forEach(((e,n)=>{e.elm===t&&(w.splice(n,1),(e=>{g.elm===e&&(g=w[0],C())})(t),st(t))}))}))},st=e=>{e.remove()};let dt,ct,lt;const ut=(e,t,n)=>{const a=document.createElement("div");return a.classList.add("task"),n.elm=a,a.appendChild(mt(t,n)),a.appendChild(pt(e)),a.appendChild(yt(n)),a.appendChild(Lt(a)),lt=a,Mt(),a},mt=(e,t)=>{const n=document.createElement("div");return n.classList.add("checklist-wrapper"),n.appendChild(ht(e,t)),n},ht=(e,t)=>{const n=document.createElement("button");return n.classList.add("checklist-btn"),n.appendChild(vt(e)),n.appendChild(ft(e)),t.checklist=n,Wt(n,e),((e,t)=>{const n=e.firstElementChild;e.addEventListener("click",(()=>{n.classList.add(`${t.priority}`),n.style.animation="check 250ms linear"})),n.addEventListener("animationend",(()=>{g.tasks.forEach(((e,n)=>{e.elm===t.elm&&g.tasks.splice(n,1)})),st(t.elm)}))})(n,t),n},vt=e=>{const t=document.createElement("img");return t.classList.add("checklist-img"),t.src=`icons/checklist-${e}.svg`,t},ft=e=>{const t=document.createElement("img");return t.classList.add("check-img","invisible"),t.src=`icons/check-${e}.svg`,t},pt=e=>{const{name:t,desc:n,dueDate:a}=e,r=document.createElement("div");return r.classList.add("taskinfo-wrapper"),r.appendChild(gt(t)),r.appendChild(wt(n)),r.appendChild(bt(a)),r},gt=e=>{const t=document.createElement("div");return t.classList.add("name-container"),t.textContent=e,t},wt=e=>{const t=document.createElement("div");return t.classList.add("desc-container"),t.textContent=e,t},bt=e=>{const t=document.createElement("div");return t.classList.add("duedate-container"),t.textContent=e,t},yt=e=>{const t=document.createElement("div");return t.classList.add("edit-container"),t.appendChild(Ct(e)),t},Ct=e=>{const t=document.createElement("button");return t.classList.add("edit-btn","invisible"),t.appendChild(Et()),dt=t,St(t),((e,t)=>{e.addEventListener("click",(()=>{L&&(v(E),tt()),L=!0;let e=g.tasks.filter((e=>e.elm===t.elm));e=e[0],E=e,t.elm.insertAdjacentElement("afterend",M(L)),(e=>{De[0].value=e.name,De[1].value=e.desc,De[2].value=k(e.dueDate),De[3].value=e.priority})(e),st(t.elm)}))})(t,e),t},Et=()=>{const e=document.createElement("img");return e.classList.add("edit-img"),e.src="icons/edit.svg",e},Lt=e=>{const t=document.createElement("div");return t.classList.add("remove-container"),t.appendChild(kt(e)),t},kt=e=>{const t=document.createElement("button");return t.classList.add("remove-btn","invisible"),t.appendChild(Tt()),ct=t,((e,t)=>{e.addEventListener("click",(()=>{g.tasks.forEach(((e,n)=>{e.elm===t&&(g.tasks.splice(n,1),st(t))}))}))})(t,e),Ut(t),t},Tt=()=>{const e=document.createElement("img");return e.classList.add("remove-img"),e.src="icons/trash.svg",e};let xt=[];const Mt=()=>{xt.push({task:lt,edit:dt,remove:ct}),xt.forEach((e=>Dt(e.task,e.edit,e.remove)))},Dt=(e,t,n)=>{e.addEventListener("mouseover",(()=>{t.classList.remove("invisible"),n.classList.remove("invisible")})),e.addEventListener("mouseout",(()=>{t.classList.add("invisible"),n.classList.add("invisible")}))},Pt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),Yt(t,"icons/delete-black.svg","icons/delete.svg")},St=e=>{Yt(e,"icons/edit-black.svg","icons/edit.svg")},Ut=e=>{Yt(e,"icons/trash-red.svg","icons/trash.svg")},Wt=(e,t)=>{let n,a;"low"===t?(n="icons/checklist-low-hover.svg",a="icons/checklist-low.svg"):"medium"===t?(n="icons/checklist-medium-hover.svg",a="icons/checklist-medium.svg"):"high"===t&&(n="icons/checklist-high-hover.svg",a="icons/checklist-high.svg"),Yt(e,n,a),jt(e)},jt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible")))},Yt=(e,t,n)=>{const a=e.firstElementChild;e.addEventListener("mouseover",(()=>a.src=t)),e.addEventListener("mouseout",(()=>a.src=n))};let Ot;const Nt=()=>{const e=document.createElement("div");return e.classList.add("inbox","active-project"),e.appendChild(qt()),e.appendChild(Ft()),w.push({name:"Inbox",tasks:[],elm:e}),y(e),g=w[0],e},qt=()=>{const e=document.createElement("img");return e.classList.add("inbox-icon"),e.src="icons/inbox.svg",e},Ft=()=>{const e=document.createElement("div");return e.classList.add("inbox-text"),e.textContent="Inbox",e},Ht=()=>{const e=document.createElement("div");return e.classList.add("today-list"),e.appendChild(At()),e.appendChild(zt()),w.push({name:"Today",tasks:[],elm:e}),y(e),e},At=()=>{const e=document.createElement("img");return e.classList.add("today-icon"),e.src="icons/today.svg",e},zt=()=>{const e=document.createElement("div");return e.classList.add("today-text"),e.textContent="Today",e},Qt=e=>{const t=document.createElement("div");return t.classList.add("projects-container"),t.appendChild(Gt()),t.appendChild(Xt(e)),(e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),Yt(t,"icons/plus-black.svg","icons/plus.svg")})(t),t},Gt=()=>{const e=document.createElement("div");return e.classList.add("projects-text"),e.textContent="Projects",e},Xt=e=>{const t=document.createElement("button");return t.classList.add("addproject-btn","invisible"),t.appendChild(Bt()),((e,t)=>{e.addEventListener("click",(()=>(e=>{const t=document.createElement("div");t.classList.add("modal"),t.appendChild(Qe()),ze=t,at(),e.appendChild(t)})(t)))})(t,e.parentElement),t},Bt=()=>{const e=document.createElement("img");return e.classList.add("addproject-icon"),e.src="icons/plus.svg",e};let Rt;const Jt=document.querySelector("#container");(e=>{const t=document.createElement("div");t.classList.add("header"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("img");return e.classList.add("checklist-icon"),e.src="icons/checklist.svg",e})()),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("title"),e.textContent="Todo List",e})())})(Jt),(e=>{const t=document.createElement("div");t.classList.add("content"),e.appendChild(t),Rt=t})(Jt),(e=>{const t=document.createElement("div");t.classList.add("sidebar"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("top-menu"),e.appendChild(Nt()),e.appendChild(Ht()),e})()),t.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-menu"),t.appendChild(Qt(e)),Ot=t,t})(e))})(Rt),(e=>{const t=document.createElement("div");t.classList.add("todolist-container"),e.appendChild(t),t.appendChild(d()),r=t})(Rt)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,