(()=>{"use strict";var e={d:(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{g:()=>rn});const t=(e,t,a)=>{const o=document.createElement("div");return o.classList.add("project"),o.appendChild(n(a)),o.appendChild(r(t)),o.appendChild(i(o)),e.elm=o,M(o),zt(o),o},n=e=>{const t=document.createElement("div");return t.classList.add("project-color-container"),t.appendChild(a(e)),t},a=e=>{const t=document.createElement("div");return t.classList.add("color-div"),t.style.background=e,t},r=e=>{const t=document.createElement("div");return t.classList.add("project-name-container"),t.textContent=e,t},i=e=>{const t=document.createElement("button");return t.classList.add("project-remove-btn","invisible"),t.appendChild(o()),pt(t,e),t},o=()=>{const e=document.createElement("img");return e.classList.add("project-remove-img"),e.src="icons/delete.svg",e};let s,d,c,l,u;const m=()=>{const e=document.createElement("div");return e.classList.add("todolist"),e.appendChild(h()),e.appendChild(v()),e.appendChild(f()),e.appendChild(p()),e.appendChild(Ge()),s=e,e},h=()=>{const e=document.createElement("div");return e.classList.add("project-name"),e.textContent=x.name,e},v=()=>{const e=document.createElement("div");return e.classList.add("high-priority-container"),c=e,e},f=()=>{const e=document.createElement("div");return e.classList.add("medium-priority-container"),l=e,e},p=()=>{const e=document.createElement("div");return e.classList.add("low-priority-container"),u=e,e},g=()=>{const e=D.find((e=>"Today"===e.name));e.tasks=e.tasks.concat(b(e)),y(e)},w=()=>{const e=new Date;return`${String(e.getDate()).padStart(2,"0")}-${String(e.getMonth()+1).padStart(2,"0")}-${e.getFullYear()}`},b=e=>{const t=[],n=(e=>{const t=[];return D.forEach((n=>{n!==e&&n.tasks.forEach((e=>{e.dueDate===w()&&t.push(e)}))})),t})(e);return n.forEach((n=>{e.tasks.includes(n)||t.push(n)})),t},y=e=>{e.tasks.forEach(((t,n)=>{t.dueDate!==w()&&e.tasks.splice(n,1)}))},C=()=>{const e=D.find((e=>"Today"===e.name)),t=D.find((e=>"Inbox"===e.name)),n=D.filter((n=>n!==e&&n!==t));console.log(n),localStorage.setItem("projects",JSON.stringify(n)),localStorage.setItem("inboxTodoTasks",JSON.stringify(t.tasks))};class k{constructor(e,t,n,a){this.name=e,this.desc=t,this.dueDate=n,this.priority=a,this.elm="",this.checklist=""}}const E=(e,t)=>{if(void 0!==t&&e.priority!==t.priority)return L(e);O.insertAdjacentElement("afterend",Ct({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))},L=e=>{"high"===e.priority&&c.appendChild(Ct({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)),"medium"===e.priority&&l.appendChild(Ct({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)),"low"===e.priority&&u.appendChild(Ct({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))};class T{constructor(e,t){this.name=e,this.color=t,this.tasks=[],this.elm=""}}let x,D=[];const M=e=>{e.addEventListener("click",(()=>{e.classList.contains("active-project")||0===D.filter((t=>e===t.elm)).length||(x=D.filter((t=>e===t.elm)),x=x[0],S())}))},S=()=>{D.forEach((e=>e.elm.classList.remove("active-project"))),x.elm.classList.add("active-project"),ft(),d.appendChild(m()),(()=>{for(const e of s.childNodes)e.classList.contains("task-add")&&e.remove()})(),g(),x.tasks.forEach((e=>L(e))),s.appendChild(Ge()),Ae(),U=!1};let P,U;const j=e=>e.replace(/-/gm," ").split(" ").reverse().join("-"),W=e=>{if(!U)return;const t=D.find((e=>"Today"===e.name));He(U),e.addEventListener("click",(()=>{if(!Fe()||!U)return;const e={...P};if(P.name=Ne[0].value,P.desc=Ne[1].value,P.dueDate=ze(Ne[2].value),P.priority=Ne[3].value,x===t&&P.dueDate!==w())return ut(),Ae(),gt(P.elm),U=!1,void C();E(P,e),ut(),Ae(),U=!1,C()}))};let O;const Y=e=>{const t=document.createElement("div");return t.classList.add("todo-form"),O=t,t.appendChild(N()),t.appendChild(q()),t.appendChild(F()),t.appendChild(z(e)),t},N=()=>{const e=document.createElement("input");return e.classList.add("taskname-input"),e.placeholder="Task name",Ne.push(e),e},q=()=>{const e=document.createElement("input");return e.classList.add("taskdescription-input"),e.placeholder="Description",Ne.push(e),e},F=()=>{const e=document.createElement("div");return e.classList.add("taskdetails-container"),e.appendChild(H()),e.appendChild(A()),e},H=()=>{const e=document.createElement("input");return e.classList.add("duedate-input"),e.type="date",Ne.push(e),e},A=()=>{const e=document.createElement("select");e.classList.add("priority-select");const t=document.createElement("option");t.textContent="Priority Low",t.value="low";const n=document.createElement("option");n.textContent="Priority Medium",n.value="medium";const a=document.createElement("option");return a.textContent="Priority High",a.value="high",e.add(t),e.add(n),e.add(a),Ne.push(e),e},z=e=>{const t=document.createElement("div");return t.classList.add("buttons-container"),t.appendChild(Q(e)),t.appendChild(G(e)),t},Q=e=>{const t=document.createElement("button");return t.classList.add("cancel-btn"),t.textContent="Cancel",lt(t,e),t},G=e=>{const t=document.createElement("button");return t.classList.add("addtask-btn"),e&&(t.textContent="Save"),e||(t.textContent="Add task"),Ye=t,qe(e),W(t),t};function I(e){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},I(e)}function X(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function B(e){X(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===I(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function R(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function J(e){X(1,arguments);var t=B(e),n=t.getUTCDay(),a=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function $(e){X(1,arguments);var t=B(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=J(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=J(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}var _={};function V(){return _}function K(e,t){var n,a,r,i,o,s,d,c;X(1,arguments);var l=V(),u=R(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==a?a:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=B(e),h=m.getUTCDay(),v=(h<u?7:0)+h-u;return m.setUTCDate(m.getUTCDate()-v),m.setUTCHours(0,0,0,0),m}function Z(e,t){var n,a,r,i,o,s,d,c;X(1,arguments);var l=B(e),u=l.getUTCFullYear(),m=V(),h=R(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==a?a:null===(d=m.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(u+1,0,h),v.setUTCHours(0,0,0,0);var f=K(v,t),p=new Date(0);p.setUTCFullYear(u,0,h),p.setUTCHours(0,0,0,0);var g=K(p,t);return l.getTime()>=f.getTime()?u+1:l.getTime()>=g.getTime()?u:u-1}function ee(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const te=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return ee("yy"===t?a%100:a,t.length)},ne=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):ee(n+1,2)},ae=function(e,t){return ee(e.getUTCDate(),t.length)},re=function(e,t){return ee(e.getUTCHours()%12||12,t.length)},ie=function(e,t){return ee(e.getUTCHours(),t.length)},oe=function(e,t){return ee(e.getUTCMinutes(),t.length)},se=function(e,t){return ee(e.getUTCSeconds(),t.length)},de=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return ee(Math.floor(a*Math.pow(10,n-3)),t.length)};var ce={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return te(e,t)},Y:function(e,t,n,a){var r=Z(e,a),i=r>0?r:1-r;return"YY"===t?ee(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):ee(i,t.length)},R:function(e,t){return ee($(e),t.length)},u:function(e,t){return ee(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return ee(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return ee(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return ne(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return ee(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=function(e,t){X(1,arguments);var n=B(e),a=K(n,t).getTime()-function(e,t){var n,a,r,i,o,s,d,c;X(1,arguments);var l=V(),u=R(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:l.firstWeekContainsDate)&&void 0!==a?a:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=Z(e,t),h=new Date(0);return h.setUTCFullYear(m,0,u),h.setUTCHours(0,0,0,0),K(h,t)}(n,t).getTime();return Math.round(a/6048e5)+1}(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):ee(r,t.length)},I:function(e,t,n){var a=function(e){X(1,arguments);var t=B(e),n=J(t).getTime()-function(e){X(1,arguments);var t=$(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),J(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):ee(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ae(e,t)},D:function(e,t,n){var a=function(e){X(1,arguments);var t=B(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=n-t.getTime();return Math.floor(a/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):ee(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return ee(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return ee(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return ee(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return re(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ie(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):ee(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):ee(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):oe(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):se(e,t)},S:function(e,t){return de(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return ue(r);case"XXXX":case"XX":return me(r);default:return me(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return ue(r);case"xxxx":case"xx":return me(r);default:return me(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+le(r,":");default:return"GMT"+me(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+le(r,":");default:return"GMT"+me(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return ee(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return ee((a._originalDate||e).getTime(),t.length)}};function le(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+ee(i,2)}function ue(e,t){return e%60==0?(e>0?"-":"+")+ee(Math.abs(e)/60,2):me(e,t)}function me(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+ee(Math.floor(r/60),2)+n+ee(r%60,2)}const he=ce;var ve=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},fe=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},pe={p:fe,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return ve(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",ve(r,t)).replace("{{time}}",fe(i,t))}};const ge=pe;var we=["D","DD"],be=["YY","YYYY"];function ye(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Ce={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ke(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var Ee,Le={date:ke({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ke({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ke({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Te={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function xe(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[s]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function De(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,s=i[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return o=e.valueCallback?e.valueCallback(c):c,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(s.length)}}}const Me={code:"en-US",formatDistance:function(e,t,n){var a,r=Ce[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:Le,formatRelative:function(e,t,n,a){return Te[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:xe({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:xe({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:xe({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:xe({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:xe({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Ee={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(Ee.matchPattern);if(!n)return null;var a=n[0],r=e.match(Ee.parsePattern);if(!r)return null;var i=Ee.valueCallback?Ee.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(a.length)}}),era:De({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:De({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:De({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:De({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:De({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var Se=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Pe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ue=/^'([^]*?)'?$/,je=/''/g,We=/[a-zA-Z]/;function Oe(e,t,n){var a,r,i,o,s,d,c,l,u,m,h,v,f,p,g,w,b,y;X(2,arguments);var C=String(t),k=V(),E=null!==(a=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:k.locale)&&void 0!==a?a:Me,L=R(null!==(i=null!==(o=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:k.firstWeekContainsDate)&&void 0!==o?o:null===(u=k.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=R(null!==(h=null!==(v=null!==(f=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(w=g.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:k.weekStartsOn)&&void 0!==v?v:null===(b=k.locale)||void 0===b||null===(y=b.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==h?h:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var x=B(e);if(!function(e){if(X(1,arguments),!function(e){return X(1,arguments),e instanceof Date||"object"===I(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=B(e);return!isNaN(Number(t))}(x))throw new RangeError("Invalid time value");var D=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(x),M=function(e,t){return X(2,arguments),function(e,t){X(2,arguments);var n=B(e).getTime(),a=R(t);return new Date(n+a)}(e,-R(t))}(x,D),S={firstWeekContainsDate:L,weekStartsOn:T,locale:E,_originalDate:x};return C.match(Pe).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,ge[t])(e,E.formatLong):e})).join("").match(Se).map((function(a){if("''"===a)return"'";var r,i,o=a[0];if("'"===o)return(i=(r=a).match(Ue))?i[1].replace(je,"'"):r;var s,d=he[o];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=a,-1===be.indexOf(s))||ye(a,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==we.indexOf(e)}(a)||ye(a,t,String(e)),d(M,a,E.localize,S);if(o.match(We))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}let Ye,Ne=[];const qe=e=>{if(e)return;const t=D.find((e=>"Inbox"===e.name)),n=D.find((e=>"Today"===e.name));He(e),Ye.addEventListener("click",(()=>{if(!Fe()||e)return;""===Ne[2].value&&(Ne[2].value=Qe());let a=new k(Ne[0].value,Ne[1].value,ze(Ne[2].value),Ne[3].value);if(x===n&&(t.tasks.push(a),a.dueDate!==w()))return ut(),Ae(),void C();x.tasks.push(a),(()=>{let e=x.tasks[x.tasks.length-1];L(e),C()})(),ut(),Ae()}))},Fe=()=>""!==Ne[0].value,He=e=>{e&&Ye.classList.add("valid"),Ne[0].addEventListener("input",(()=>""!==Ne[0].value?Ye.classList.add("valid"):Ye.classList.remove("valid")))},Ae=()=>{Ne=[]},ze=e=>Oe(new Date(e),"dd-MM-yyyy"),Qe=()=>Oe(new Date,"yyyy-MM-dd"),Ge=()=>{const e=document.createElement("div");return e.classList.add("task-add"),e.appendChild(Ie()),e.appendChild(Be()),(e=>{e.addEventListener("click",(()=>{if(U)return E(P),void ut();e.parentElement.appendChild(Y(U)),e.remove()}))})(e),e},Ie=()=>{const e=document.createElement("div");return e.classList.add("task-add-btn"),e.appendChild(Xe()),e},Xe=()=>{const e=document.createElement("img");return e.classList.add("task-add-icon"),e.src="icons/plus-green.svg",e},Be=()=>{const e=document.createElement("div");return e.classList.add("task-add-text"),e.textContent="Add task",e};let Re,Je;const $e=()=>""!==Re.value,_e=e=>{Re.addEventListener("input",(()=>""!==Re.value?e.classList.add("valid"):e.classList.remove("valid")))};let Ve;const Ke=()=>{const e=document.createElement("div");return e.classList.add("modal-content"),e.appendChild(Ze()),e.appendChild(et()),e.appendChild(st()),e},Ze=()=>{const e=document.createElement("div");return e.classList.add("header-modal"),e.textContent="Add project",e},et=()=>{const e=document.createElement("div");return e.classList.add("inputs-wrapper"),e.appendChild(tt()),e.appendChild(rt()),e},tt=()=>{const e=document.createElement("div");return e.classList.add("inputname-container"),e.appendChild(nt()),e.appendChild(at()),e},nt=()=>{const e=document.createElement("div");return e.classList.add("inputname-label"),e.textContent="Name",e},at=()=>{const e=document.createElement("input");return e.classList.add("projectname-input"),Re=e,e},rt=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-container"),e.appendChild(it()),e.appendChild(ot()),e},it=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-label"),e.textContent="Color",e},ot=()=>{const e=document.createElement("input");return e.type="color",e.classList.add("projectcolor-input"),Je=e,e},st=()=>{const e=document.createElement("div");return e.classList.add("projectbuttons-container"),e.appendChild(dt()),e.appendChild(ct()),e},dt=()=>{const e=document.createElement("button");return e.classList.add("project-cancel-btn"),e.textContent="Cancel",mt(e),e},ct=()=>{const e=document.createElement("button");return e.classList.add("project-add-btn"),e.textContent="Add",(e=>{_e(e),e.addEventListener("click",(()=>{if(!$e())return;let e=new T(Re.value,Je.value);D.push(e),(()=>{let e=D[D.length-1];Rt.appendChild(t(e,e.name,e.color)),C()})(),vt()}))})(e),e},lt=e=>{e.addEventListener("click",(()=>{U&&E(P),ut()}))},ut=()=>{U||s.appendChild(Ge()),Ae(),O.remove(),U=!1},mt=e=>{e.addEventListener("click",(()=>vt()))},ht=()=>{window.onclick=e=>{e.target===Ve&&vt()}},vt=()=>{Ve.remove()},ft=()=>{s.remove()},pt=(e,t)=>{const n=D.find((e=>"Today"===e.name));e.addEventListener("click",(()=>{D.forEach(((e,a)=>{e.elm===t&&(e.tasks.forEach((e=>{n.tasks.includes(e)&&n.tasks.splice(n.tasks.indexOf(e),1)})),D.splice(a,1),(e=>{x.elm===e&&(x=D[0],S())})(t),gt(t),C())}))}))},gt=e=>{e.remove()};let wt,bt,yt;const Ct=(e,t,n)=>{const a=document.createElement("div");return a.classList.add("task"),n.elm=a,a.appendChild(kt(t,n)),a.appendChild(xt(e,n)),a.appendChild(jt(n)),a.appendChild(Yt(n)),yt=a,Ht(),a},kt=(e,t)=>{const n=document.createElement("div");return n.classList.add("checklist-wrapper"),n.appendChild(Et(e,t)),n},Et=(e,t)=>{const n=document.createElement("button");return n.classList.add("checklist-btn"),n.appendChild(Lt(e)),n.appendChild(Tt(e)),t.checklist=n,It(n,e),((e,t)=>{const n=D.find((e=>"Today"===e.name)),a=e.firstElementChild;e.addEventListener("click",(()=>{a.classList.add(`${t.priority}`),a.style.animation="check 250ms linear"})),a.addEventListener("animationend",(()=>{x===n&&D.forEach((e=>{e!==n&&e.tasks.includes(t)&&e.tasks.splice(e.tasks.indexOf(t),1)})),x!==n&&n.tasks.includes(t)&&n.tasks.splice(n.tasks.indexOf(t),1),x.tasks.forEach(((e,n)=>{e.elm===t.elm&&x.tasks.splice(n,1)})),gt(t.elm),C()}))})(n,t),n},Lt=e=>{const t=document.createElement("img");return t.classList.add("checklist-img"),t.src=`icons/checklist-${e}.svg`,t},Tt=e=>{const t=document.createElement("img");return t.classList.add("check-img","invisible"),t.src=`icons/check-${e}.svg`,t},xt=(e,t)=>{const{name:n,desc:a,dueDate:r}=e,i=document.createElement("div");return i.classList.add("taskinfo-wrapper"),i.appendChild(Dt(n)),i.appendChild(Mt(a)),i.appendChild(St(r,t)),i},Dt=e=>{const t=document.createElement("div");return t.classList.add("name-container"),t.textContent=e,t},Mt=e=>{const t=document.createElement("div");return t.classList.add("desc-container"),t.textContent=e,t},St=(e,t)=>{const n=document.createElement("div");return n.classList.add("due-date-project-wrapper"),n.appendChild(Pt(e)),n.appendChild(Ut(t)),n},Pt=e=>{const t=document.createElement("div");return t.classList.add("duedate-container"),t.textContent=e,t},Ut=e=>{const t=document.createElement("div");return t.classList.add("project-name-task-container"),t.textContent=(e=>{const t=D.find((e=>"Today"===e.name));if(x!==t)return;let n;return D.forEach((a=>{a!==t&&a.tasks.includes(e)&&(n=a.name)})),n})(e),t},jt=e=>{const t=document.createElement("div");return t.classList.add("edit-container"),t.appendChild(Wt(e)),t},Wt=e=>{const t=document.createElement("button");return t.classList.add("edit-btn","invisible"),t.appendChild(Ot()),wt=t,Qt(t),((e,t)=>{e.addEventListener("click",(()=>{U&&(E(P),ut()),U=!0;let e=x.tasks.filter((e=>e.elm===t.elm));e=e[0],P=e,t.elm.insertAdjacentElement("afterend",Y(U)),(e=>{Ne[0].value=e.name,Ne[1].value=e.desc,Ne[2].value=j(e.dueDate),Ne[3].value=e.priority})(e),gt(t.elm)}))})(t,e),t},Ot=()=>{const e=document.createElement("img");return e.classList.add("edit-img"),e.src="icons/edit.svg",e},Yt=e=>{const t=document.createElement("div");return t.classList.add("remove-container"),t.appendChild(Nt(e)),t},Nt=e=>{const t=document.createElement("button");return t.classList.add("remove-btn","invisible"),t.appendChild(qt()),bt=t,((e,t)=>{const n=D.find((e=>"Today"===e.name));e.addEventListener("click",(()=>{x===n&&D.forEach((e=>{e!==n&&e.tasks.includes(t)&&e.tasks.splice(e.tasks.indexOf(t),1)})),x!==n&&n.tasks.includes(t)&&n.tasks.splice(n.tasks.indexOf(t),1),x.tasks.forEach(((e,n)=>{e.elm===t.elm&&(x.tasks.splice(n,1),gt(t.elm),C())}))}))})(t,e),Gt(t),t},qt=()=>{const e=document.createElement("img");return e.classList.add("remove-img"),e.src="icons/trash.svg",e};let Ft=[];const Ht=()=>{Ft.push({task:yt,edit:wt,remove:bt}),Ft.forEach((e=>At(e.task,e.edit,e.remove)))},At=(e,t,n)=>{e.addEventListener("mouseover",(()=>{t.classList.remove("invisible"),n.classList.remove("invisible")})),e.addEventListener("mouseout",(()=>{t.classList.add("invisible"),n.classList.add("invisible")}))},zt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),Bt(t,"icons/delete-black.svg","icons/delete.svg")},Qt=e=>{Bt(e,"icons/edit-black.svg","icons/edit.svg")},Gt=e=>{Bt(e,"icons/trash-red.svg","icons/trash.svg")},It=(e,t)=>{let n,a;"low"===t?(n="icons/checklist-low-hover.svg",a="icons/checklist-low.svg"):"medium"===t?(n="icons/checklist-medium-hover.svg",a="icons/checklist-medium.svg"):"high"===t&&(n="icons/checklist-high-hover.svg",a="icons/checklist-high.svg"),Bt(e,n,a),Xt(e)},Xt=e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible")))},Bt=(e,t,n)=>{const a=e.firstElementChild;e.addEventListener("mouseover",(()=>a.src=t)),e.addEventListener("mouseout",(()=>a.src=n))};let Rt;const Jt=()=>{const e=document.createElement("div");return e.classList.add("inbox","active-project"),e.appendChild($t()),e.appendChild(_t()),D.push({name:"Inbox",tasks:[],elm:e}),M(e),x=D[0],e},$t=()=>{const e=document.createElement("img");return e.classList.add("inbox-icon"),e.src="icons/inbox.svg",e},_t=()=>{const e=document.createElement("div");return e.classList.add("inbox-text"),e.textContent="Inbox",e},Vt=()=>{const e=document.createElement("div");return e.classList.add("today-list"),e.appendChild(Kt()),e.appendChild(Zt()),D.push({name:"Today",tasks:[],elm:e}),M(e),e},Kt=()=>{const e=document.createElement("img");return e.classList.add("today-icon"),e.src="icons/today.svg",e},Zt=()=>{const e=document.createElement("div");return e.classList.add("today-text"),e.textContent="Today",e},en=e=>{const t=document.createElement("div");return t.classList.add("projects-container"),t.appendChild(tn()),t.appendChild(nn(e)),(e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),Bt(t,"icons/plus-black.svg","icons/plus.svg")})(t),t},tn=()=>{const e=document.createElement("div");return e.classList.add("projects-text"),e.textContent="Projects",e},nn=e=>{const t=document.createElement("button");return t.classList.add("addproject-btn","invisible"),t.appendChild(an()),((e,t)=>{e.addEventListener("click",(()=>(e=>{const t=document.createElement("div");t.classList.add("modal"),t.appendChild(Ke()),Ve=t,ht(),e.appendChild(t)})(t)))})(t,e.parentElement),t},an=()=>{const e=document.createElement("img");return e.classList.add("addproject-icon"),e.src="icons/plus.svg",e};let rn;const on=document.querySelector("#container");(e=>{const t=document.createElement("div");t.classList.add("header"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("img");return e.classList.add("checklist-icon"),e.src="icons/checklist.svg",e})()),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("title"),e.textContent="Todo List",e})())})(on),(e=>{const t=document.createElement("div");t.classList.add("content"),e.appendChild(t),rn=t})(on),(e=>{const t=document.createElement("div");t.classList.add("sidebar"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("top-menu"),e.appendChild(Jt()),e.appendChild(Vt()),e})()),t.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-menu"),t.appendChild(en(e)),Rt=t,t})(e))})(rn),(e=>{const t=document.createElement("div");t.classList.add("todolist-container"),e.appendChild(t),t.appendChild(m()),d=t})(rn),(()=>{const e=D.find((e=>e.name="Inbox")),n=JSON.parse(localStorage.getItem("projects"));e.tasks=JSON.parse(localStorage.getItem("inboxTodoTasks")),null===e.tasks&&(e.tasks=[]),g(),x.tasks.forEach((e=>L(e))),null!==n&&(D=D.concat(n),(()=>{const e=D.find((e=>"Today"===e.name)),n=D.find((e=>"Inbox"===e.name));D.forEach((a=>{a!==e&&a!==n&&Rt.appendChild(t(a,a.name,a.color))}))})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,