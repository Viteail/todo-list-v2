(()=>{"use strict";var e={d:(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}};e.d({},{g:()=>Ut});var t={};e.r(t),e.d(t,{ID:()=>Ve,ys:()=>et,xo:()=>Ze,gx:()=>Je,bb:()=>_e,a_:()=>$e,$3:()=>Ie,y2:()=>Ke,kV:()=>Re});let n,a,r,i=[];const o=(e,t,n)=>{let a=e.firstElementChild;e.addEventListener("mouseover",(()=>a.src=t)),e.addEventListener("mouseout",(()=>a.src=n))},d=()=>{const e=document.createElement("input");return e.classList.add("duedate-input"),e.type="date",Oe.push(e),e},s=()=>{const e=document.createElement("select");e.classList.add("priority-select");const t=document.createElement("option");t.textContent="Priority Low",t.value="low";const n=document.createElement("option");n.textContent="Priority Medium",n.value="medium";const a=document.createElement("option");return a.textContent="Priority High",a.value="high",e.add(t),e.add(n),e.add(a),Oe.push(e),e},c=()=>{const e=document.createElement("button");return e.classList.add("cancel-btn"),e.textContent="Cancel",_e(e),e},u=()=>{const e=document.createElement("button");return e.classList.add("addtask-btn"),e.textContent="Add task",Ye=e,Ne(),e},l=(e,t,o)=>{const d=document.createElement("div");return d.classList.add("task"),d.appendChild(m(t)),d.appendChild(f(e)),d.appendChild(w()),d.appendChild(E(d)),r=d,i.push({task:r,edit:n,remove:a}),i.forEach((e=>((e,t,n)=>{e.addEventListener("mouseover",(()=>{t.classList.remove("invisible"),n.classList.remove("invisible")})),e.addEventListener("mouseout",(()=>{t.classList.add("invisible"),n.classList.add("invisible")}))})(e.task,e.edit,e.remove))),o.elm=d,d},m=e=>{const t=document.createElement("div");return t.classList.add("checklist-wrapper"),t.appendChild(h(e)),t},h=e=>{const t=document.createElement("button");return t.classList.add("checklist-btn"),t.appendChild(v(e)),t},v=e=>{const t=document.createElement("img");return t.classList.add("checklist-img"),t.src=`icons/checklist-${e}.svg`,t},f=e=>{const{name:t,desc:n,dueDate:a}=e,r=document.createElement("div");return r.classList.add("taskinfo-wrapper"),r.appendChild(p(t)),r.appendChild(g(n)),r.appendChild(b(a)),r},p=e=>{const t=document.createElement("div");return t.classList.add("name-container"),t.textContent=e,t},g=e=>{const t=document.createElement("div");return t.classList.add("desc-container"),t.textContent=e,t},b=e=>{const t=document.createElement("div");return t.classList.add("duedate-container"),t.textContent=e,t},w=()=>{const e=document.createElement("div");return e.classList.add("edit-container"),e.appendChild(y()),e},y=()=>{const e=document.createElement("button");return e.classList.add("edit-btn","invisible"),e.appendChild(C()),n=e,e},C=()=>{const e=document.createElement("img");return e.classList.add("edit-img"),e.src="icons/edit.svg",e},E=e=>{const t=document.createElement("div");return t.classList.add("remove-container"),t.appendChild(L(e)),t},L=e=>{const t=document.createElement("button");return t.classList.add("remove-btn","invisible"),t.appendChild(k()),a=t,Ze(t,e),t},k=()=>{const e=document.createElement("img");return e.classList.add("remove-img"),e.src="icons/trash.svg",e},T=e=>{const t=document.createElement("div");return t.classList.add("project-color-container"),t.appendChild(x(e)),t},x=e=>{const t=document.createElement("div");return t.classList.add("color-div"),t.style.background=e,t},M=e=>{const t=document.createElement("div");return t.classList.add("project-name-container"),t.textContent=e,t},D=e=>{const t=document.createElement("button");return t.classList.add("project-remove-btn","invisible"),t.appendChild(S()),et(t,e),t},S=()=>{const e=document.createElement("img");return e.classList.add("project-remove-img"),e.src="icons/delete.svg",e};class P{constructor(e,t){this.name=e,this.color=t,this.tasks=[],this.elm=""}}let U,W=[];const j=e=>{e.addEventListener("click",(()=>{e.classList.contains("active-project")||0===W.filter((t=>e===t.elm)).length||(U=W.filter((t=>e===t.elm)),U=U[0],Y())}))},Y=()=>{W.forEach((e=>e.elm.classList.remove("active-project"))),U.elm.classList.add("active-project"),Ke(),N.appendChild(q()),A(),z()};let O,N;const q=()=>{const e=document.createElement("div");return e.classList.add("todolist"),e.appendChild(F()),e.appendChild(Qe()),O=e,e},F=()=>{const e=document.createElement("div");return e.classList.add("project-name"),e.textContent=U.name,e};class H{constructor(e,t,n,a){this.name=e,this.desc=t,this.dueDate=n,this.priority=a,this.elm=""}}const z=()=>{U.tasks.forEach((e=>O.appendChild(l({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e)))),O.appendChild(Qe())},A=()=>{for(const e of O.childNodes)e.classList.contains("task-add")&&e.remove()};function Q(e){return Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Q(e)}function G(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function X(e){G(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===Q(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function B(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function R(e){G(1,arguments);var t=X(e),n=t.getUTCDay(),a=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function _(e){G(1,arguments);var t=X(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=R(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=R(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}var I={};function J(){return I}function V(e,t){var n,a,r,i,o,d,s,c;G(1,arguments);var u=J(),l=B(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==r?r:u.weekStartsOn)&&void 0!==a?a:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=X(e),h=m.getUTCDay(),v=(h<l?7:0)+h-l;return m.setUTCDate(m.getUTCDate()-v),m.setUTCHours(0,0,0,0),m}function $(e,t){var n,a,r,i,o,d,s,c;G(1,arguments);var u=X(e),l=u.getUTCFullYear(),m=J(),h=B(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==a?a:null===(s=m.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(l+1,0,h),v.setUTCHours(0,0,0,0);var f=V(v,t),p=new Date(0);p.setUTCFullYear(l,0,h),p.setUTCHours(0,0,0,0);var g=V(p,t);return u.getTime()>=f.getTime()?l+1:u.getTime()>=g.getTime()?l:l-1}function K(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const Z=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return K("yy"===t?a%100:a,t.length)},ee=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):K(n+1,2)},te=function(e,t){return K(e.getUTCDate(),t.length)},ne=function(e,t){return K(e.getUTCHours()%12||12,t.length)},ae=function(e,t){return K(e.getUTCHours(),t.length)},re=function(e,t){return K(e.getUTCMinutes(),t.length)},ie=function(e,t){return K(e.getUTCSeconds(),t.length)},oe=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return K(Math.floor(a*Math.pow(10,n-3)),t.length)};var de={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return Z(e,t)},Y:function(e,t,n,a){var r=$(e,a),i=r>0?r:1-r;return"YY"===t?K(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):K(i,t.length)},R:function(e,t){return K(_(e),t.length)},u:function(e,t){return K(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return K(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return K(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return ee(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return K(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=function(e,t){G(1,arguments);var n=X(e),a=V(n,t).getTime()-function(e,t){var n,a,r,i,o,d,s,c;G(1,arguments);var u=J(),l=B(null!==(n=null!==(a=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==a?a:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=$(e,t),h=new Date(0);return h.setUTCFullYear(m,0,l),h.setUTCHours(0,0,0,0),V(h,t)}(n,t).getTime();return Math.round(a/6048e5)+1}(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):K(r,t.length)},I:function(e,t,n){var a=function(e){G(1,arguments);var t=X(e),n=R(t).getTime()-function(e){G(1,arguments);var t=_(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),R(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):K(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):te(e,t)},D:function(e,t,n){var a=function(e){G(1,arguments);var t=X(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=n-t.getTime();return Math.floor(a/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):K(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return K(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return K(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return K(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return ne(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ae(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):K(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):K(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):re(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ie(e,t)},S:function(e,t){return oe(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return ce(r);case"XXXX":case"XX":return ue(r);default:return ue(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return ce(r);case"xxxx":case"xx":return ue(r);default:return ue(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+se(r,":");default:return"GMT"+ue(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+se(r,":");default:return"GMT"+ue(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return K(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return K((a._originalDate||e).getTime(),t.length)}};function se(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+K(i,2)}function ce(e,t){return e%60==0?(e>0?"-":"+")+K(Math.abs(e)/60,2):ue(e,t)}function ue(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+K(Math.floor(r/60),2)+n+K(r%60,2)}const le=de;var me=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},he=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},ve={p:he,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return me(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",me(r,t)).replace("{{time}}",he(i,t))}};const fe=ve;var pe=["D","DD"],ge=["YY","YYYY"];function be(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var we={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ye(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var Ce,Ee={date:ye({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ye({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ye({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Le={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ke(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[d]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function Te(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,d=i[0],s=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(s):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(s);return o=e.valueCallback?e.valueCallback(c):c,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(d.length)}}}const xe={code:"en-US",formatDistance:function(e,t,n){var a,r=we[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:Ee,formatRelative:function(e,t,n,a){return Le[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ke({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ke({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:ke({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ke({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ke({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Ce={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(Ce.matchPattern);if(!n)return null;var a=n[0],r=e.match(Ce.parsePattern);if(!r)return null;var i=Ce.valueCallback?Ce.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(a.length)}}),era:Te({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Te({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Te({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Te({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Te({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var Me=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,De=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Se=/^'([^]*?)'?$/,Pe=/''/g,Ue=/[a-zA-Z]/;function We(e,t,n){var a,r,i,o,d,s,c,u,l,m,h,v,f,p,g,b,w,y;G(2,arguments);var C=String(t),E=J(),L=null!==(a=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:E.locale)&&void 0!==a?a:xe,k=B(null!==(i=null!==(o=null!==(d=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==d?d:E.firstWeekContainsDate)&&void 0!==o?o:null===(l=E.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=B(null!==(h=null!==(v=null!==(f=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(b=g.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==f?f:E.weekStartsOn)&&void 0!==v?v:null===(w=E.locale)||void 0===w||null===(y=w.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==h?h:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!L.localize)throw new RangeError("locale must contain localize property");if(!L.formatLong)throw new RangeError("locale must contain formatLong property");var x=X(e);if(!function(e){if(G(1,arguments),!function(e){return G(1,arguments),e instanceof Date||"object"===Q(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=X(e);return!isNaN(Number(t))}(x))throw new RangeError("Invalid time value");var M=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(x),D=function(e,t){return G(2,arguments),function(e,t){G(2,arguments);var n=X(e).getTime(),a=B(t);return new Date(n+a)}(e,-B(t))}(x,M),S={firstWeekContainsDate:k,weekStartsOn:T,locale:L,_originalDate:x};return C.match(De).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,fe[t])(e,L.formatLong):e})).join("").match(Me).map((function(a){if("''"===a)return"'";var r,i,o=a[0];if("'"===o)return(i=(r=a).match(Se))?i[1].replace(Pe,"'"):r;var d,s=le[o];if(s)return null!=n&&n.useAdditionalWeekYearTokens||(d=a,-1===ge.indexOf(d))||be(a,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==pe.indexOf(e)}(a)||be(a,t,String(e)),s(D,a,L.localize,S);if(o.match(Ue))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}const je=e=>{e.addEventListener("click",(()=>{(e=>{const n=document.createElement("div");n.classList.add("todo-form"),e.appendChild(n),t.todoListElm=e,Re=n,n.appendChild((()=>{const e=document.createElement("input");return e.classList.add("taskname-input"),e.placeholder="Task name",Oe.push(e),e})()),n.appendChild((()=>{const e=document.createElement("input");return e.classList.add("taskdescription-input"),e.placeholder="Description",Oe.push(e),e})()),n.appendChild((()=>{const e=document.createElement("div");return e.classList.add("taskdetails-container"),e.appendChild(d()),e.appendChild(s()),e})()),n.appendChild((()=>{const e=document.createElement("div");return e.classList.add("buttons-container"),e.appendChild(c()),e.appendChild(u()),e})())})(e.parentElement),e.remove()}))};let Ye,Oe=[];const Ne=()=>{Fe(),Ye.addEventListener("click",(()=>{if(!qe())return;""===Oe[2].value&&(Oe[2].value=Ae());let e=new H(Oe[0].value,Oe[1].value,ze(Oe[2].value),Oe[3].value);console.log(U),U.tasks.push(e),(()=>{let e=U.tasks[U.tasks.length-1];O.appendChild(l({name:e.name,desc:e.desc,dueDate:e.dueDate},e.priority,e))})(),Ie(),He()}))},qe=()=>""!==Oe[0].value,Fe=()=>{Oe[0].addEventListener("input",(()=>""!==Oe[0].value?Ye.classList.add("valid"):Ye.classList.remove("valid")))},He=()=>{Oe=[]},ze=e=>We(new Date(e),"dd-MM-yyyy"),Ae=()=>We(new Date,"yyyy-MM-dd"),Qe=()=>{const e=document.createElement("div");return e.classList.add("task-add"),e.appendChild(Ge()),e.appendChild(Be()),je(e),e},Ge=()=>{const e=document.createElement("div");return e.classList.add("task-add-btn"),e.appendChild(Xe()),e},Xe=()=>{const e=document.createElement("img");return e.classList.add("task-add-icon"),e.src="icons/plus-green.svg",e},Be=()=>{const e=document.createElement("div");return e.classList.add("task-add-text"),e.textContent="Add task",e};let Re;const _e=e=>{e.addEventListener("click",(()=>Ie()))},Ie=()=>{O.appendChild(Qe()),He(),Re.remove()},Je=e=>{e.addEventListener("click",(()=>$e()))},Ve=()=>{window.onclick=e=>{e.target===nt&&$e()}},$e=()=>{nt.remove()},Ke=()=>{O.remove()},Ze=(e,t)=>{e.addEventListener("click",(()=>{U.tasks.forEach(((e,n)=>{e.elm===t&&(U.tasks.splice(n,1),tt(t))}))}))},et=(e,t)=>{e.addEventListener("click",(()=>{W.forEach(((e,n)=>{e.elm===t&&(W.splice(n,1),(e=>{U.elm===e&&(U=W[0],Y())})(t),tt(t))}))}))},tt=e=>{e.remove()};let nt;const at=()=>{const e=document.createElement("div");return e.classList.add("header-modal"),e.textContent="Add project",e},rt=()=>{const e=document.createElement("div");return e.classList.add("inputs-wrapper"),e.appendChild(it()),e.appendChild(st()),e},it=()=>{const e=document.createElement("div");return e.classList.add("inputname-container"),e.appendChild(ot()),e.appendChild(dt()),e},ot=()=>{const e=document.createElement("div");return e.classList.add("inputname-label"),e.textContent="Name",e},dt=()=>{const e=document.createElement("input");return e.classList.add("projectname-input"),vt=e,e},st=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-container"),e.appendChild(ct()),e.appendChild(ut()),e},ct=()=>{const e=document.createElement("div");return e.classList.add("inputcolor-label"),e.textContent="Color",e},ut=()=>{const e=document.createElement("input");return e.type="color",e.classList.add("projectcolor-input"),ft=e,e},lt=()=>{const e=document.createElement("div");return e.classList.add("projectbuttons-container"),e.appendChild(mt()),e.appendChild(ht()),e},mt=()=>{const e=document.createElement("button");return e.classList.add("project-cancel-btn"),e.textContent="Cancel",Je(e),e},ht=()=>{const e=document.createElement("button");return e.classList.add("project-add-btn"),e.textContent="Add",gt(e),e};let vt,ft;const pt=(e,t)=>{e.addEventListener("click",(()=>(e=>{const t=document.createElement("div");t.classList.add("modal"),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("modal-content"),e.appendChild(at()),e.appendChild(rt()),e.appendChild(lt()),e})()),nt=t,Ve(),e.appendChild(t)})(t)))},gt=e=>{wt(e),e.addEventListener("click",(()=>{if(!bt())return;let e=new P(vt.value,ft.value);W.push(e),(()=>{let e=W[W.length-1];yt.appendChild(((e,t,n)=>{const a=document.createElement("div");return a.classList.add("project"),a.appendChild(T(n)),a.appendChild(M(t)),a.appendChild(D(a)),e.elm=a,j(a),(e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),o(t,"icons/delete-black.svg","icons/delete.svg")})(a),a})(e,e.name,e.color))})(),$e()}))},bt=()=>""!==vt.value,wt=e=>{vt.addEventListener("input",(()=>""!==vt.value?e.classList.add("valid"):e.classList.remove("valid")))};let yt;const Ct=()=>{const e=document.createElement("div");return e.classList.add("inbox","active-project"),e.appendChild(Et()),e.appendChild(Lt()),W.push({name:"Inbox",tasks:[],elm:e}),j(e),U=W[0],e},Et=()=>{const e=document.createElement("img");return e.classList.add("inbox-icon"),e.src="icons/inbox.svg",e},Lt=()=>{const e=document.createElement("div");return e.classList.add("inbox-text"),e.textContent="Inbox",e},kt=()=>{const e=document.createElement("div");return e.classList.add("today-list"),e.appendChild(Tt()),e.appendChild(xt()),W.push({name:"Today",tasks:[],elm:e}),j(e),e},Tt=()=>{const e=document.createElement("img");return e.classList.add("today-icon"),e.src="icons/today.svg",e},xt=()=>{const e=document.createElement("div");return e.classList.add("today-text"),e.textContent="Today",e},Mt=e=>{const t=document.createElement("div");return t.classList.add("projects-container"),t.appendChild(Dt()),t.appendChild(St(e)),(e=>{const t=e.lastElementChild;e.addEventListener("mouseover",(()=>t.classList.remove("invisible"))),e.addEventListener("mouseout",(()=>t.classList.add("invisible"))),o(t,"icons/plus-black.svg","icons/plus.svg")})(t),t},Dt=()=>{const e=document.createElement("div");return e.classList.add("projects-text"),e.textContent="Projects",e},St=e=>{const t=document.createElement("button");return t.classList.add("addproject-btn","invisible"),t.appendChild(Pt()),pt(t,e.parentElement),t},Pt=()=>{const e=document.createElement("img");return e.classList.add("addproject-icon"),e.src="icons/plus.svg",e};let Ut;const Wt=document.querySelector("#container");(e=>{const t=document.createElement("div");t.classList.add("header"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("img");return e.classList.add("checklist-icon"),e.src="icons/checklist.svg",e})()),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("title"),e.textContent="Todo List",e})())})(Wt),(e=>{const t=document.createElement("div");t.classList.add("content"),e.appendChild(t),Ut=t})(Wt),(e=>{const t=document.createElement("div");t.classList.add("sidebar"),e.appendChild(t),t.appendChild((()=>{const e=document.createElement("div");return e.classList.add("top-menu"),e.appendChild(Ct()),e.appendChild(kt()),e})()),t.appendChild((e=>{const t=document.createElement("div");return t.classList.add("project-menu"),t.appendChild(Mt(e)),yt=t,t})(e))})(Ut),(e=>{const t=document.createElement("div");t.classList.add("todolist-container"),e.appendChild(t),t.appendChild(q()),N=t})(Ut)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,